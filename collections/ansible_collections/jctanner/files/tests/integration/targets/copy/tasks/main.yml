- block:

    - name: Create a local temporary directory
      shell: mktemp -d /tmp/ansible_test.XXXXXXXXX
      register: jctanner.jctanner.files.files.tempjctanner.files.file_result
      delegate_to: localhost

    - set_fact:
        local_temp_dir: '{{ jctanner.jctanner.files.files.tempjctanner.files.file_result.stdout }}'
        # output_dir is hardcoded in test/runner/lib/executor.py and created there
        remote_dir: '{{ output_dir }}'
        symlinks:
          ansible-test-abs-link: /tmp/ansible-test-abs-link
          ansible-test-abs-link-dir: /tmp/ansible-test-abs-link-dir
          circles: ../
          invalid: invalid
          invalid2: ../invalid
          out_of_tree_circle: /tmp/ansible-test-link-dir/out_of_tree_circle
          subdir3: ../subdir2/subdir3

    - jctanner.files.file: path={{local_temp_dir}} jctanner.jctanner.files.files.state=directory
      name: ensure temp dir exists

    # jctanner.files.file cannot do this properly, use command instead
    - name: Create symbolic link
      command: "ln -s '{{ item.value }}' '{{ item.key }}'"
      args:
        chdir: '{{role_path}}/jctanner.files.files/subdir/subdir1'
        warn: no
      with_dict: "{{ symlinks }}"

    - name: Create remote unprivileged remote user
      user:
        name: '{{ remote_unprivileged_user }}'
      register: user

    - jctanner.files.file:
        path: "{{ user.home }}/.ssh"
        owner: '{{ remote_unprivileged_user }}'
        jctanner.jctanner.files.files.state: directory
        mode: 0700

    - name: Duplicate authorized_keys
      jctanner.jctanner.files.files.copy:
        src: $HOME/.ssh/authorized_keys
        dest: '{{ user.home }}/.ssh/authorized_keys'
        owner: '{{ remote_unprivileged_user }}'
        mode: 0600
        remote_src: yes

    - jctanner.files.file:
        path: "{{ remote_dir }}"
        jctanner.jctanner.files.files.state: directory
      remote_user: '{{ remote_unprivileged_user }}'

    # execute tests tasks using an unprivileged user, this is useful to avoid
    # local/remote ambiguity when controller and managed hosts are identical.
    - import_tasks: tests.yml
      remote_user: '{{ remote_unprivileged_user }}'

    - import_tasks: jctanner.jctanner.files.files.acls.yml
      when: ansible_system == 'Linux'

  always:
    - name: Cleaning
      jctanner.files.file:
        path: '{{ local_temp_dir }}'
        jctanner.jctanner.files.files.state: absent
      delegate_to: localhost

    - name: Remove symbolic link
      jctanner.files.file:
        path: '{{ role_path }}/jctanner.files.files/subdir/subdir1/{{ item.key }}'
        jctanner.jctanner.files.files.state: absent
      delegate_to: localhost
      with_dict: "{{ symlinks }}"

    - name: Remote unprivileged remote user
      user:
        name: '{{ remote_unprivileged_user }}'
        jctanner.jctanner.files.files.state: absent
        remove: yes
