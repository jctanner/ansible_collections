# test code for the jctanner.jctanner.files.files.copy module and action plugin
# (c) 2014, Michael DeHaan <michael.dehaan@gmail.com>
# (c) 2017, Ansible Project
#
# GNU General Public License v3 or later (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt )
#

- name: Record the output directory
  set_fact:
    remote_jctanner.files.file: "{{ remote_dir }}/foo.txt"

- name: Initiate a basic jctanner.jctanner.files.files.copy, and also test the mode
  jctanner.jctanner.files.files.copy:
    src: foo.txt
    dest: "{{ remote_jctanner.files.file }}"
    mode: 0444
  register: jctanner.jctanner.files.files.copy_result

- name: Record the sha of the test jctanner.files.file for later tests
  set_fact:
    remote_jctanner.files.file_hash: "{{ jctanner.jctanner.files.files.copy_result['checksum'] }}"

- name: Check the mode of the output jctanner.files.file
  jctanner.files.file:
    name: "{{ remote_jctanner.files.file }}"
    jctanner.jctanner.files.files.state: jctanner.files.file
  register: jctanner.files.file_result_check

- name: Assert the mode is correct
  assert:
    that:
      - "jctanner.files.file_result_check.mode == '0444'"

# same as expanduser & expandvars
- command: 'echo {{ remote_dir }}'
  register: echo

- set_fact:
    remote_dir_expanded: '{{ echo.stdout }}'
    remote_jctanner.files.file_expanded: '{{ echo.stdout }}/foo.txt'

- debug:
    var: jctanner.jctanner.files.files.copy_result
    verbosity: 1

- name: Assert basic jctanner.jctanner.files.files.copy worked
  assert:
    that:
      - "'changed' in jctanner.jctanner.files.files.copy_result"
      - jctanner.jctanner.files.files.copy_result.dest == remote_jctanner.files.file_expanded
      - "'group' in jctanner.jctanner.files.files.copy_result"
      - "'gid' in jctanner.jctanner.files.files.copy_result"
      - "'md5sum' in jctanner.jctanner.files.files.copy_result"
      - "'checksum' in jctanner.jctanner.files.files.copy_result"
      - "'owner' in jctanner.jctanner.files.files.copy_result"
      - "'size' in jctanner.jctanner.files.files.copy_result"
      - "'src' in jctanner.jctanner.files.files.copy_result"
      - "'jctanner.jctanner.files.files.state' in jctanner.jctanner.files.files.copy_result"
      - "'uid' in jctanner.jctanner.files.files.copy_result"

- name: Verify that the jctanner.files.file was marked as changed
  assert:
    that:
      - "jctanner.jctanner.files.files.copy_result.changed == true"

- name: Verify that the jctanner.files.file checksums are correct
  assert:
    that:
      - "jctanner.jctanner.files.files.copy_result.checksum == ('foo.txt\n'|hash('sha1'))"

- name: Verify that the legacy md5sum is correct
  assert:
    that:
      - "jctanner.jctanner.files.files.copy_result.md5sum == ('foo.txt\n'|hash('md5'))"
  when: ansible_fips|bool != True

- name: Check the jctanner.jctanner.files.files.stat results of the jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_jctanner.files.file }}"
  register: jctanner.jctanner.files.files.stat_results

- debug:
    var: jctanner.jctanner.files.files.stat_results
    verbosity: 1

- name: Assert the jctanner.jctanner.files.files.stat results are correct
  assert:
    that:
      - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.exists == true"
      - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.isblk == false"
      - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.isfifo == false"
      - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.isreg == true"
      - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.issock == false"
      - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.checksum == ('foo.txt\n'|hash('sha1'))"

- name: Overwrite the jctanner.files.file via same means
  jctanner.jctanner.files.files.copy:
    src: foo.txt
    dest: "{{ remote_jctanner.files.file }}"
    decrypt: no
  register: jctanner.jctanner.files.files.copy_result2

- name: Assert that the jctanner.files.file was not changed
  assert:
    that:
      - "jctanner.jctanner.files.files.copy_result2 is not changed"

- name: Assert basic jctanner.jctanner.files.files.copy worked
  assert:
    that:
      - "'changed' in jctanner.jctanner.files.files.copy_result2"
      - jctanner.jctanner.files.files.copy_result2.dest == remote_jctanner.files.file_expanded
      - "'group' in jctanner.jctanner.files.files.copy_result2"
      - "'gid' in jctanner.jctanner.files.files.copy_result2"
      - "'checksum' in jctanner.jctanner.files.files.copy_result2"
      - "'owner' in jctanner.jctanner.files.files.copy_result2"
      - "'size' in jctanner.jctanner.files.files.copy_result2"
      - "'jctanner.jctanner.files.files.state' in jctanner.jctanner.files.files.copy_result2"
      - "'uid' in jctanner.jctanner.files.files.copy_result2"

- name: Overwrite the jctanner.files.file using the content system
  jctanner.jctanner.files.files.copy:
    content: "modified"
    dest: "{{ remote_jctanner.files.file }}"
    decrypt: no
  register: jctanner.jctanner.files.files.copy_result3

- name: Check the jctanner.jctanner.files.files.stat results of the jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_jctanner.files.file }}"
  register: jctanner.jctanner.files.files.stat_results

- debug:
    var: jctanner.jctanner.files.files.stat_results
    verbosity: 1

- name: Assert that the jctanner.files.file has changed
  assert:
     that:
       - "jctanner.jctanner.files.files.copy_result3 is changed"
       - "'content' not in jctanner.jctanner.files.files.copy_result3"
       - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.checksum == ('modified'|hash('sha1'))"
       - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.mode != '0700'"

- name: Overwrite the jctanner.files.file again using the content system, also passing along jctanner.files.file params
  jctanner.jctanner.files.files.copy:
    content: "modified"
    dest: "{{ remote_jctanner.files.file }}"
    mode: 0700
    decrypt: no
  register: jctanner.jctanner.files.files.copy_result4

- name: Check the jctanner.jctanner.files.files.stat results of the jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_jctanner.files.file }}"
  register: jctanner.jctanner.files.files.stat_results

- debug:
    var: jctanner.jctanner.files.files.stat_results
    verbosity: 1

- name: Assert that the jctanner.files.file has changed
  assert:
     that:
       - "jctanner.jctanner.files.files.copy_result3 is changed"
       - "'content' not in jctanner.jctanner.files.files.copy_result3"
       - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.checksum == ('modified'|hash('sha1'))"
       - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.mode == '0700'"

- name: Create a hardlink to the jctanner.files.file
  jctanner.files.file:
    src: '{{ remote_jctanner.files.file }}'
    dest: '{{ remote_dir }}/hard.lnk'
    jctanner.jctanner.files.files.state: hard

- name: jctanner.jctanner.files.files.copy the same contents into place
  jctanner.jctanner.files.files.copy:
    content: 'modified'
    dest: '{{ remote_jctanner.files.file }}'
    mode: 0700
    decrypt: no
  register: jctanner.jctanner.files.files.copy_results

- name: Check the jctanner.jctanner.files.files.stat results of the jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_jctanner.files.file }}"
  register: jctanner.jctanner.files.files.stat_results

- name: Check the jctanner.jctanner.files.files.stat results of the hard link
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/hard.lnk"
  register: hlink_results

- name: Check that the jctanner.files.file did not change
  assert:
    that:
      - 'jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.inode == hlink_results.jctanner.jctanner.files.files.stat.inode'
      - 'jctanner.jctanner.files.files.copy_results.changed == False'
      - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.checksum == ('modified'|hash('sha1'))"

- name: jctanner.jctanner.files.files.copy the same contents into place but change mode
  jctanner.jctanner.files.files.copy:
    content: 'modified'
    dest: '{{ remote_jctanner.files.file }}'
    mode: 0404
    decrypt: no
  register: jctanner.jctanner.files.files.copy_results

- name: Check the jctanner.jctanner.files.files.stat results of the jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_jctanner.files.file }}"
  register: jctanner.jctanner.files.files.stat_results

- name: Check the jctanner.jctanner.files.files.stat results of the hard link
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/hard.lnk"
  register: hlink_results

- name: Check that the jctanner.files.file changed permissions but is still the same
  assert:
    that:
      - 'jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.inode == hlink_results.jctanner.jctanner.files.files.stat.inode'
      - 'jctanner.jctanner.files.files.copy_results.changed == True'
      - 'jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.mode == hlink_results.jctanner.jctanner.files.files.stat.mode'
      - 'jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.mode == "0404"'
      - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.checksum == ('modified'|hash('sha1'))"

- name: jctanner.jctanner.files.files.copy the different contents into place
  jctanner.jctanner.files.files.copy:
    content: 'adjusted'
    dest: '{{ remote_jctanner.files.file }}'
    mode: 0404
  register: jctanner.jctanner.files.files.copy_results

- name: Check the jctanner.jctanner.files.files.stat results of the jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_jctanner.files.file }}"
  register: jctanner.jctanner.files.files.stat_results

- name: Check the jctanner.jctanner.files.files.stat results of the hard link
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/hard.lnk"
  register: hlink_results

- name: Check that the jctanner.files.file changed and hardlink was broken
  assert:
    that:
      - 'jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.inode != hlink_results.jctanner.jctanner.files.files.stat.inode'
      - 'jctanner.jctanner.files.files.copy_results.changed == True'
      - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.checksum == ('adjusted'|hash('sha1'))"
      - "hlink_results.jctanner.jctanner.files.files.stat.checksum == ('modified'|hash('sha1'))"

- name: Try invalid jctanner.jctanner.files.files.copy input location fails
  jctanner.jctanner.files.files.copy:
    src: invalid_jctanner.files.file_location_does_not_exist
    dest: "{{ remote_dir }}/jctanner.files.file.txt"
  ignore_errors: True
  register: failed_jctanner.jctanner.files.files.copy

- name: Assert that invalid source failed
  assert:
    that:
      - "failed_jctanner.jctanner.files.files.copy.failed"
      - "'invalid_jctanner.files.file_location_does_not_exist' in failed_jctanner.jctanner.files.files.copy.msg"

- name: Try empty source to ensure it fails
  jctanner.jctanner.files.files.copy:
    src: ''
    dest: "{{ remote_dir }}"
  ignore_errors: True
  register: failed_jctanner.jctanner.files.files.copy

- debug:
    var: failed_jctanner.jctanner.files.files.copy
    verbosity: 1

- name: Assert that empty source failed
  assert:
    that:
      - failed_jctanner.jctanner.files.files.copy is failed
      - "'src (or content) is required' in failed_jctanner.jctanner.files.files.copy.msg"

- name: Try without destination to ensure it fails
  jctanner.jctanner.files.files.copy:
    src: foo.txt
  ignore_errors: True
  register: failed_jctanner.jctanner.files.files.copy

- debug:
    var: failed_jctanner.jctanner.files.files.copy
    verbosity: 1

- name: Assert that missing destination failed
  assert:
    that:
      - failed_jctanner.jctanner.files.files.copy is failed
      - "'dest is required' in failed_jctanner.jctanner.files.files.copy.msg"

- name: Try without source to ensure it fails
  jctanner.jctanner.files.files.copy:
    dest: "{{ remote_jctanner.files.file }}"
  ignore_errors: True
  register: failed_jctanner.jctanner.files.files.copy

- debug:
    var: failed_jctanner.jctanner.files.files.copy
    verbosity: 1

- name: Assert that missing source failed
  assert:
    that:
      - failed_jctanner.jctanner.files.files.copy is failed
      - "'src (or content) is required' in failed_jctanner.jctanner.files.files.copy.msg"

- name: Try with both src and content to ensure it fails
  jctanner.jctanner.files.files.copy:
    src: foo.txt
    content: testing
    dest: "{{ remote_jctanner.files.file }}"
  ignore_errors: True
  register: failed_jctanner.jctanner.files.files.copy

- name: Assert that mutually exclusive parameters failed
  assert:
    that:
      - failed_jctanner.jctanner.files.files.copy is failed
      - "'mutually exclusive' in failed_jctanner.jctanner.files.files.copy.msg"

- name: Try with content and directory as destination to ensure it fails
  jctanner.jctanner.files.files.copy:
    content: testing
    dest: "{{ remote_dir }}"
  ignore_errors: True
  register: failed_jctanner.jctanner.files.files.copy

- debug:
    var: failed_jctanner.jctanner.files.files.copy
    verbosity: 1

- name: Assert that content and directory as destination failed
  assert:
    that:
      - failed_jctanner.jctanner.files.files.copy is failed
      - "'can not use content with a dir as dest' in failed_jctanner.jctanner.files.files.copy.msg"

- name: Clean up
  jctanner.files.file:
    path: "{{ remote_jctanner.files.file }}"
    jctanner.jctanner.files.files.state: absent

- name: Copy source jctanner.files.file to destination directory with mode
  jctanner.jctanner.files.files.copy:
    src: foo.txt
    dest: "{{ remote_dir }}"
    mode: 0500
  register: jctanner.jctanner.files.files.copy_results

- name: Check the jctanner.jctanner.files.files.stat results of the jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_jctanner.files.file }}'
  register: jctanner.jctanner.files.files.stat_results

- debug:
    var: jctanner.jctanner.files.files.stat_results
    verbosity: 1

- name: Assert that the jctanner.files.file has changed
  assert:
     that:
       - "jctanner.jctanner.files.files.copy_results is changed"
       - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.checksum == ('foo.txt\n'|hash('sha1'))"
       - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.mode == '0500'"

# Test jctanner.jctanner.files.files.copy with mode=preserve
- name: Create jctanner.files.file and set perms to an odd value
  jctanner.jctanner.files.files.copy:
    content: "foo.txt\n"
    dest: '{{ local_temp_dir }}/foo.txt'
    mode: 0547
  delegate_to: localhost

- name: Copy with mode=preserve
  jctanner.jctanner.files.files.copy:
    src: '{{ local_temp_dir }}/foo.txt'
    dest: '{{ remote_dir }}/jctanner.jctanner.files.files.copy-foo.txt'
    mode: preserve
  register: jctanner.jctanner.files.files.copy_results

- name: Check the jctanner.jctanner.files.files.stat results of the jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/jctanner.jctanner.files.files.copy-foo.txt'
  register: jctanner.jctanner.files.files.stat_results

- name: Assert that the jctanner.files.file has changed and has correct mode
  assert:
     that:
       - "jctanner.jctanner.files.files.copy_results is changed"
       - "jctanner.jctanner.files.files.copy_results.mode == '0547'"
       - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.checksum == ('foo.txt\n'|hash('sha1'))"
       - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.mode == '0547'"

- name: Test jctanner.jctanner.files.files.copy with mode=preserve and remote_src=True
  jctanner.jctanner.files.files.copy:
    src: '{{ remote_dir }}/jctanner.jctanner.files.files.copy-foo.txt'
    dest: '{{ remote_dir }}/jctanner.jctanner.files.files.copy-foo2.txt'
    mode: 'preserve'
    remote_src: True
  register: jctanner.jctanner.files.files.copy_results2

- name: Check the jctanner.jctanner.files.files.stat results of the jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/jctanner.jctanner.files.files.copy-foo2.txt'
  register: jctanner.jctanner.files.files.stat_results2

- name: Assert that the jctanner.files.file has changed and has correct mode
  assert:
     that:
       - "jctanner.jctanner.files.files.copy_results2 is changed"
       - "jctanner.jctanner.files.files.copy_results2.mode == '0547'"
       - "jctanner.jctanner.files.files.stat_results2.jctanner.jctanner.files.files.stat.checksum == ('foo.txt\n'|hash('sha1'))"
       - "jctanner.jctanner.files.files.stat_results2.jctanner.jctanner.files.files.stat.mode == '0547'"

#
# test recursive jctanner.jctanner.files.files.copy local_follow=False, no trailing slash
#

- name: Create empty directory in the role we're jctanner.jctanner.files.files.copying from (git can't store empty dirs)
  jctanner.files.file:
    path: '{{ role_path }}/jctanner.files.files/subdir/subdira'
    jctanner.jctanner.files.files.state: directory
  delegate_to: localhost

- name: Set the output subdirectory
  set_fact:
    remote_subdir: "{{ remote_dir }}/sub"

- name: Make an output subdirectory
  jctanner.files.file:
    name: "{{ remote_subdir }}"
    jctanner.jctanner.files.files.state: directory

- name: Setup link target for absolute link
  jctanner.jctanner.files.files.copy:
    dest: /tmp/ansible-test-abs-link
    content: target
  delegate_to: localhost

- name: Setup link target dir for absolute link
  jctanner.files.file:
    dest: /tmp/ansible-test-abs-link-dir
    jctanner.jctanner.files.files.state: directory
  delegate_to: localhost

- name: Test recursive jctanner.jctanner.files.files.copy to directory no trailing slash, local_follow=False
  jctanner.jctanner.files.files.copy:
    src: subdir
    dest: "{{ remote_subdir }}"
    directory_mode: 0700
    local_follow: False
  register: recursive_jctanner.jctanner.files.files.copy_result

- debug:
    var: recursive_jctanner.jctanner.files.files.copy_result
    verbosity: 1

- name: Assert that the recursive jctanner.jctanner.files.files.copy did something
  assert:
    that:
      - "recursive_jctanner.jctanner.files.files.copy_result is changed"

- name: Check that a jctanner.files.file in a directory was transferred
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/subdir/bar.txt"
  register: jctanner.jctanner.files.files.stat_bar

- name: Check that a jctanner.files.file in a deeper directory was transferred
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/subdir/subdir2/baz.txt"
  register: jctanner.jctanner.files.files.stat_bar2

- name: Check that a jctanner.files.file in a directory whose parent contains a directory alone was transferred
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/subdir/subdir2/subdir3/subdir4/qux.txt"
  register: jctanner.jctanner.files.files.stat_bar3

- name: Assert recursive jctanner.jctanner.files.files.copy jctanner.files.files
  assert:
    that:
      - "jctanner.jctanner.files.files.stat_bar.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_bar2.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_bar3.jctanner.jctanner.files.files.stat.exists"

- name: Check symlink to absolute path
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir/subdir1/ansible-test-abs-link'
  register: jctanner.jctanner.files.files.stat_abs_link

- name: Check symlink to relative path
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir/subdir1/bar.txt'
  register: jctanner.jctanner.files.files.stat_relative_link

- name: Check symlink to self
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir/subdir1/invalid'
  register: jctanner.jctanner.files.files.stat_self_link

- name: Check symlink to nonexistent jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir/subdir1/invalid2'
  register: jctanner.jctanner.files.files.stat_invalid_link

- name: Check symlink to directory in jctanner.jctanner.files.files.copy
  jctanner.jctanner.files.files.stat:
   path: '{{ remote_dir }}/sub/subdir/subdir1/subdir3'
  register: jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link

- name: Check symlink to directory outside of jctanner.jctanner.files.files.copy
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir/subdir1/ansible-test-abs-link-dir'
  register: jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link

- name: Assert recursive jctanner.jctanner.files.files.copy symlinks local_follow=False
  assert:
    that:
      - "jctanner.jctanner.files.files.stat_abs_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_abs_link.jctanner.jctanner.files.files.stat.islnk"
      - "'/tmp/ansible-test-abs-link' == jctanner.jctanner.files.files.stat_abs_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_relative_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_relative_link.jctanner.jctanner.files.files.stat.islnk"
      - "'../bar.txt' == jctanner.jctanner.files.files.stat_relative_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_self_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_self_link.jctanner.jctanner.files.files.stat.islnk"
      - "'invalid' in jctanner.jctanner.files.files.stat_self_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_invalid_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_invalid_link.jctanner.jctanner.files.files.stat.islnk"
      - "'../invalid' in jctanner.jctanner.files.files.stat_invalid_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.islnk"
      - "'../subdir2/subdir3' in jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.islnk"
      - "'/tmp/ansible-test-abs-link-dir' == jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.lnk_target"

- name: Stat the recursively copied directories
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/{{ item }}"
  register: dir_jctanner.jctanner.files.files.stats
  with_items:
    - "subdir"
    - "subdir/subdira"
    - "subdir/subdir1"
    - "subdir/subdir2"
    - "subdir/subdir2/subdir3"
    - "subdir/subdir2/subdir3/subdir4"

- debug:
    var: jctanner.jctanner.files.files.stat_results
    verbosity: 1

- name: Assert recursive copied directories mode (1)
  assert:
    that:
      - "item.jctanner.jctanner.files.files.stat.exists"
      - "item.jctanner.jctanner.files.files.stat.mode == '0700'"
  with_items: "{{dir_jctanner.jctanner.files.files.stats.results}}"

- name: Test recursive jctanner.jctanner.files.files.copy to directory no trailing slash, local_follow=False second time
  jctanner.jctanner.files.files.copy:
    src: subdir
    dest: "{{ remote_subdir }}"
    directory_mode: 0700
    local_follow: False
  register: recursive_jctanner.jctanner.files.files.copy_result

- name: Assert that the second jctanner.jctanner.files.files.copy did not change anything
  assert:
    that:
      - "recursive_jctanner.jctanner.files.files.copy_result is not changed"

- name: Cleanup the recursive jctanner.jctanner.files.files.copy subdir
  jctanner.files.file:
    name: "{{ remote_subdir }}"
    jctanner.jctanner.files.files.state: absent

#
# Recursive jctanner.jctanner.files.files.copy with local_follow=False, trailing slash
#

- name: Set the output subdirectory
  set_fact:
    remote_subdir: "{{ remote_dir }}/sub"

- name: Make an output subdirectory
  jctanner.files.file:
    name: "{{ remote_subdir }}"
    jctanner.jctanner.files.files.state: directory

- name: Setup link target for absolute link
  jctanner.jctanner.files.files.copy:
    dest: /tmp/ansible-test-abs-link
    content: target
  delegate_to: localhost

- name: Setup link target dir for absolute link
  jctanner.files.file:
    dest: /tmp/ansible-test-abs-link-dir
    jctanner.jctanner.files.files.state: directory
  delegate_to: localhost

- name: Test recursive jctanner.jctanner.files.files.copy to directory trailing slash, local_follow=False
  jctanner.jctanner.files.files.copy:
    src: subdir/
    dest: "{{ remote_subdir }}"
    directory_mode: 0700
    local_follow: False
  register: recursive_jctanner.jctanner.files.files.copy_result

- debug:
    var: recursive_jctanner.jctanner.files.files.copy_result
    verbosity: 1

- name: Assert that the recursive jctanner.jctanner.files.files.copy did something
  assert:
    that:
      - "recursive_jctanner.jctanner.files.files.copy_result is changed"

- name: Check that a jctanner.files.file in a directory was transferred
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/bar.txt"
  register: jctanner.jctanner.files.files.stat_bar

- name: Check that a jctanner.files.file in a deeper directory was transferred
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/subdir2/baz.txt"
  register: jctanner.jctanner.files.files.stat_bar2

- name: Check that a jctanner.files.file in a directory whose parent contains a directory alone was transferred
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/subdir2/subdir3/subdir4/qux.txt"
  register: jctanner.jctanner.files.files.stat_bar3

- name: Assert recursive jctanner.jctanner.files.files.copy jctanner.files.files
  assert:
    that:
      - "jctanner.jctanner.files.files.stat_bar.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_bar2.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_bar3.jctanner.jctanner.files.files.stat.exists"

- name: Check symlink to absolute path
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir1/ansible-test-abs-link'
  register: jctanner.jctanner.files.files.stat_abs_link

- name: Check symlink to relative path
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir1/bar.txt'
  register: jctanner.jctanner.files.files.stat_relative_link

- name: Check symlink to self
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir1/invalid'
  register: jctanner.jctanner.files.files.stat_self_link

- name: Check symlink to nonexistent jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir1/invalid2'
  register: jctanner.jctanner.files.files.stat_invalid_link

- name: Check symlink to directory in jctanner.jctanner.files.files.copy
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir1/subdir3'
  register: jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link

- name: Check symlink to directory outside of jctanner.jctanner.files.files.copy
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir1/ansible-test-abs-link-dir'
  register: jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link

- name: Assert recursive jctanner.jctanner.files.files.copy symlinks local_follow=False trailing slash
  assert:
    that:
      - "jctanner.jctanner.files.files.stat_abs_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_abs_link.jctanner.jctanner.files.files.stat.islnk"
      - "'/tmp/ansible-test-abs-link' == jctanner.jctanner.files.files.stat_abs_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_relative_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_relative_link.jctanner.jctanner.files.files.stat.islnk"
      - "'../bar.txt' == jctanner.jctanner.files.files.stat_relative_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_self_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_self_link.jctanner.jctanner.files.files.stat.islnk"
      - "'invalid' in jctanner.jctanner.files.files.stat_self_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_invalid_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_invalid_link.jctanner.jctanner.files.files.stat.islnk"
      - "'../invalid' in jctanner.jctanner.files.files.stat_invalid_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.islnk"
      - "'../subdir2/subdir3' in jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.islnk"
      - "'/tmp/ansible-test-abs-link-dir' == jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.lnk_target"

- name: Stat the recursively copied directories
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/{{ item }}"
  register: dir_jctanner.jctanner.files.files.stats
  with_items:
    - "subdira"
    - "subdir1"
    - "subdir2"
    - "subdir2/subdir3"
    - "subdir2/subdir3/subdir4"

- debug:
    var: dir_jctanner.jctanner.files.files.stats
    verbosity: 1

- name: Assert recursive copied directories mode (2)
  assert:
    that:
      - "item.jctanner.jctanner.files.files.stat.mode == '0700'"
  with_items: "{{dir_jctanner.jctanner.files.files.stats.results}}"

- name: Test recursive jctanner.jctanner.files.files.copy to directory trailing slash, local_follow=False second time
  jctanner.jctanner.files.files.copy:
    src: subdir/
    dest: "{{ remote_subdir }}"
    directory_mode: 0700
    local_follow: False
  register: recursive_jctanner.jctanner.files.files.copy_result

- name: Assert that the second jctanner.jctanner.files.files.copy did not change anything
  assert:
    that:
      - "recursive_jctanner.jctanner.files.files.copy_result is not changed"

- name: Cleanup the recursive jctanner.jctanner.files.files.copy subdir
  jctanner.files.file:
    name: "{{ remote_subdir }}"
    jctanner.jctanner.files.files.state: absent

#
# test recursive jctanner.jctanner.files.files.copy local_follow=True, no trailing slash
#

- name: Set the output subdirectory
  set_fact:
    remote_subdir: "{{ remote_dir }}/sub"

- name: Make an output subdirectory
  jctanner.files.file:
    name: "{{ remote_subdir }}"
    jctanner.jctanner.files.files.state: directory

- name: Setup link target for absolute link
  jctanner.jctanner.files.files.copy:
    dest: /tmp/ansible-test-abs-link
    content: target
  delegate_to: localhost

- name: Setup link target dir for absolute link
  jctanner.files.file:
    dest: /tmp/ansible-test-abs-link-dir
    jctanner.jctanner.files.files.state: directory
  delegate_to: localhost

- name: Test recursive jctanner.jctanner.files.files.copy to directory no trailing slash, local_follow=True
  jctanner.jctanner.files.files.copy:
    src: subdir
    dest: "{{ remote_subdir }}"
    directory_mode: 0700
    local_follow: True
  register: recursive_jctanner.jctanner.files.files.copy_result

- debug:
    var: recursive_jctanner.jctanner.files.files.copy_result
    verbosity: 1

- name: Assert that the recursive jctanner.jctanner.files.files.copy did something
  assert:
    that:
      - "recursive_jctanner.jctanner.files.files.copy_result is changed"

- name: Check that a jctanner.files.file in a directory was transferred
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/subdir/bar.txt"
  register: jctanner.jctanner.files.files.stat_bar

- name: Check that a jctanner.files.file in a deeper directory was transferred
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/subdir/subdir2/baz.txt"
  register: jctanner.jctanner.files.files.stat_bar2

- name: Check that a jctanner.files.file in a directory whose parent contains a directory alone was transferred
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/subdir/subdir2/subdir3/subdir4/qux.txt"
  register: jctanner.jctanner.files.files.stat_bar3

- name: Check that a jctanner.files.file in a directory whose parent is a symlink was transferred
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/subdir/subdir1/subdir3/subdir4/qux.txt"
  register: jctanner.jctanner.files.files.stat_bar4

- name: Assert recursive jctanner.jctanner.files.files.copy jctanner.files.files
  assert:
    that:
      - "jctanner.jctanner.files.files.stat_bar.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_bar2.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_bar3.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_bar4.jctanner.jctanner.files.files.stat.exists"

- name: Check symlink to absolute path
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir/subdir1/ansible-test-abs-link'
  register: jctanner.jctanner.files.files.stat_abs_link

- name: Check symlink to relative path
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir/subdir1/bar.txt'
  register: jctanner.jctanner.files.files.stat_relative_link

- name: Check symlink to self
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir/subdir1/invalid'
  register: jctanner.jctanner.files.files.stat_self_link

- name: Check symlink to nonexistent jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir/subdir1/invalid2'
  register: jctanner.jctanner.files.files.stat_invalid_link

- name: Check symlink to directory in jctanner.jctanner.files.files.copy
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir/subdir1/subdir3'
  register: jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link

- name: Check symlink to directory outside of jctanner.jctanner.files.files.copy
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/sub/subdir/subdir1/ansible-test-abs-link-dir'
  register: jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link

- name: Assert recursive jctanner.jctanner.files.files.copy symlinks local_follow=True
  assert:
    that:
      - "jctanner.jctanner.files.files.stat_abs_link.jctanner.jctanner.files.files.stat.exists"
      - "not jctanner.jctanner.files.files.stat_abs_link.jctanner.jctanner.files.files.stat.islnk"
      - "jctanner.jctanner.files.files.stat_abs_link.jctanner.jctanner.files.files.stat.checksum == ('target'|hash('sha1'))"
      - "jctanner.jctanner.files.files.stat_relative_link.jctanner.jctanner.files.files.stat.exists"
      - "not jctanner.jctanner.files.files.stat_relative_link.jctanner.jctanner.files.files.stat.islnk"
      - "jctanner.jctanner.files.files.stat_relative_link.jctanner.jctanner.files.files.stat.checksum == ('baz\n'|hash('sha1'))"
      - "jctanner.jctanner.files.files.stat_self_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_self_link.jctanner.jctanner.files.files.stat.islnk"
      - "'invalid' in jctanner.jctanner.files.files.stat_self_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_invalid_link.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_invalid_link.jctanner.jctanner.files.files.stat.islnk"
      - "'../invalid' in jctanner.jctanner.files.files.stat_invalid_link.jctanner.jctanner.files.files.stat.lnk_target"
      - "jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.exists"
      - "not jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.islnk"
      - "jctanner.jctanner.files.files.stat_dir_in_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.isdir"
      -
      - "jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.exists"
      - "not jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.islnk"
      - "jctanner.jctanner.files.files.stat_dir_outside_jctanner.jctanner.files.files.copy_link.jctanner.jctanner.files.files.stat.isdir"

- name: Stat the recursively copied directories
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/sub/{{ item }}"
  register: dir_jctanner.jctanner.files.files.stats
  with_items:
    - "subdir"
    - "subdir/subdira"
    - "subdir/subdir1"
    - "subdir/subdir1/subdir3"
    - "subdir/subdir1/subdir3/subdir4"
    - "subdir/subdir2"
    - "subdir/subdir2/subdir3"
    - "subdir/subdir2/subdir3/subdir4"

- debug:
    var: dir_jctanner.jctanner.files.files.stats
    verbosity: 1

- name: Assert recursive copied directories mode (3)
  assert:
    that:
      - "item.jctanner.jctanner.files.files.stat.mode == '0700'"
  with_items: "{{dir_jctanner.jctanner.files.files.stats.results}}"

- name: Test recursive jctanner.jctanner.files.files.copy to directory no trailing slash, local_follow=True second time
  jctanner.jctanner.files.files.copy:
    src: subdir
    dest: "{{ remote_subdir }}"
    directory_mode: 0700
    local_follow: True
  register: recursive_jctanner.jctanner.files.files.copy_result

- name: Assert that the second jctanner.jctanner.files.files.copy did not change anything
  assert:
    that:
      - "recursive_jctanner.jctanner.files.files.copy_result is not changed"

- name: Cleanup the recursive jctanner.jctanner.files.files.copy subdir
  jctanner.files.file:
    name: "{{ remote_subdir }}"
    jctanner.jctanner.files.files.state: absent

#
# Recursive jctanner.jctanner.files.files.copy of tricky symlinks
#
- block:
  - name: Create a directory to jctanner.jctanner.files.files.copy from
    jctanner.files.file:
      path: '{{ local_temp_dir }}/source1'
      jctanner.jctanner.files.files.state: directory

  - name: Create a directory outside of the tree
    jctanner.files.file:
      path: '{{ local_temp_dir }}/source2'
      jctanner.jctanner.files.files.state: directory

  - name: Create a symlink to a directory outside of the tree
    jctanner.files.file:
      path: '{{ local_temp_dir }}/source1/link'
      src: '{{ local_temp_dir }}/source2'
      jctanner.jctanner.files.files.state: link

  - name: Create a circular link back to the tree
    jctanner.files.file:
      path: '{{ local_temp_dir }}/source2/circle'
      src: '../source1'
      jctanner.jctanner.files.files.state: link

  - name: Create output directory
    jctanner.files.file:
      path: '{{ local_temp_dir }}/dest1'
      jctanner.jctanner.files.files.state: directory
  delegate_to: localhost

- name: Recursive jctanner.jctanner.files.files.copy the source
  jctanner.jctanner.files.files.copy:
    src: '{{ local_temp_dir }}/source1'
    dest: '{{ remote_dir }}/dest1'
    local_follow: True
  register: jctanner.jctanner.files.files.copy_result

- name: Check that the tree link is now a directory
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/dest1/source1/link'
  register: link_result

- name: Check that the out of tree link is still a link
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/dest1/source1/link/circle'
  register: circle_result

- name: Verify that the recursive jctanner.jctanner.files.files.copy worked
  assert:
    that:
      - 'jctanner.jctanner.files.files.copy_result.changed'
      - 'link_result.jctanner.jctanner.files.files.stat.isdir'
      - 'not link_result.jctanner.jctanner.files.files.stat.islnk'
      - 'circle_result.jctanner.jctanner.files.files.stat.islnk'
      - '"../source1" == circle_result.jctanner.jctanner.files.files.stat.lnk_target'

- name: Recursive jctanner.jctanner.files.files.copy the source a second time
  jctanner.jctanner.files.files.copy:
    src: '{{ local_temp_dir }}/source1'
    dest: '{{ remote_dir }}/dest1'
    local_follow: True
  register: jctanner.jctanner.files.files.copy_result

- name: Verify that the recursive jctanner.jctanner.files.files.copy made no changes
  assert:
    that:
      - 'not jctanner.jctanner.files.files.copy_result.changed'

#
# Recursive jctanner.jctanner.files.files.copy with absolute paths (#27439)
#
- name: Test that remote_dir is appropriate for this test (absolute path)
  assert:
    that:
      - '{{ remote_dir_expanded[0] == "/" }}'

- block:
  - name: Create a directory to jctanner.jctanner.files.files.copy
    jctanner.files.file:
      path: '{{ local_temp_dir }}/source_recursive'
      jctanner.jctanner.files.files.state: directory

  - name: Create a jctanner.files.file inside of the directory
    jctanner.jctanner.files.files.copy:
      content: "testing"
      dest: '{{ local_temp_dir }}/source_recursive/jctanner.files.file'

  - name: Create a directory to place the test output in
    jctanner.files.file:
      path: '{{ local_temp_dir }}/destination'
      jctanner.jctanner.files.files.state: directory
  delegate_to: localhost

- name: Copy the directory and jctanner.files.files within (no trailing slash)
  jctanner.jctanner.files.files.copy:
    src: '{{ local_temp_dir }}/source_recursive'
    dest: '{{ remote_dir }}/destination'

- name: Stat the recursively copied directory
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/destination/{{ item }}"
  register: copied_jctanner.jctanner.files.files.stat
  with_items:
    - "source_recursive"
    - "source_recursive/jctanner.files.file"
    - "jctanner.files.file"

- debug:
    var: copied_jctanner.jctanner.files.files.stat
    verbosity: 1

- name: Assert with no trailing slash, directory and jctanner.files.file is copied
  assert:
    that:
      - "copied_jctanner.jctanner.files.files.stat.results[0].jctanner.jctanner.files.files.stat.exists"
      - "copied_jctanner.jctanner.files.files.stat.results[1].jctanner.jctanner.files.files.stat.exists"
      - "not copied_jctanner.jctanner.files.files.stat.results[2].jctanner.jctanner.files.files.stat.exists"

- name: Cleanup
  jctanner.files.file:
    path: '{{ remote_dir }}/destination'
    jctanner.jctanner.files.files.state: absent

# Try again with no trailing slash

- name: Create a directory to place the test output in
  jctanner.files.file:
    path: '{{ remote_dir }}/destination'
    jctanner.jctanner.files.files.state: directory

- name: Copy just the jctanner.files.files inside of the directory
  jctanner.jctanner.files.files.copy:
    src: '{{ local_temp_dir }}/source_recursive/'
    dest: '{{ remote_dir }}/destination'

- name: Stat the recursively copied directory
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/destination/{{ item }}"
  register: copied_jctanner.jctanner.files.files.stat
  with_items:
    - "source_recursive"
    - "source_recursive/jctanner.files.file"
    - "jctanner.files.file"

- debug:
    var: copied_jctanner.jctanner.files.files.stat
    verbosity: 1

- name: Assert with trailing slash, only the jctanner.files.file is copied
  assert:
    that:
      - "not copied_jctanner.jctanner.files.files.stat.results[0].jctanner.jctanner.files.files.stat.exists"
      - "not copied_jctanner.jctanner.files.files.stat.results[1].jctanner.jctanner.files.files.stat.exists"
      - "copied_jctanner.jctanner.files.files.stat.results[2].jctanner.jctanner.files.files.stat.exists"

#
# Recursive jctanner.jctanner.files.files.copy with relative paths (#34893)
#

- name: Create a directory to jctanner.jctanner.files.files.copy
  jctanner.files.file:
    path: 'source_recursive'
    jctanner.jctanner.files.files.state: directory

- name: Create a jctanner.files.file inside of the directory
  jctanner.jctanner.files.files.copy:
    content: "testing"
    dest: 'source_recursive/jctanner.files.file'

- name: Create a directory to place the test output in
  jctanner.files.file:
    path: 'destination'
    jctanner.jctanner.files.files.state: directory

- name: Copy the directory and jctanner.files.files within (no trailing slash)
  jctanner.jctanner.files.files.copy:
    src: 'source_recursive'
    dest: 'destination'

- name: Stat the recursively copied directory
  jctanner.jctanner.files.files.stat:
    path: "destination/{{ item }}"
  register: copied_jctanner.jctanner.files.files.stat
  with_items:
    - "source_recursive"
    - "source_recursive/jctanner.files.file"
    - "jctanner.files.file"

- debug:
    var: copied_jctanner.jctanner.files.files.stat
    verbosity: 1

- name: Assert with no trailing slash, directory and jctanner.files.file is copied
  assert:
    that:
      - "copied_jctanner.jctanner.files.files.stat.results[0].jctanner.jctanner.files.files.stat.exists"
      - "copied_jctanner.jctanner.files.files.stat.results[1].jctanner.jctanner.files.files.stat.exists"
      - "not copied_jctanner.jctanner.files.files.stat.results[2].jctanner.jctanner.files.files.stat.exists"

- name: Cleanup
  jctanner.files.file:
    path: 'destination'
    jctanner.jctanner.files.files.state: absent

# Try again with no trailing slash

- name: Create a directory to place the test output in
  jctanner.files.file:
    path: 'destination'
    jctanner.jctanner.files.files.state: directory

- name: Copy just the jctanner.files.files inside of the directory
  jctanner.jctanner.files.files.copy:
    src: 'source_recursive/'
    dest: 'destination'

- name: Stat the recursively copied directory
  jctanner.jctanner.files.files.stat:
    path: "destination/{{ item }}"
  register: copied_jctanner.jctanner.files.files.stat
  with_items:
    - "source_recursive"
    - "source_recursive/jctanner.files.file"
    - "jctanner.files.file"

- debug:
    var: copied_jctanner.jctanner.files.files.stat
    verbosity: 1

- name: Assert with trailing slash, only the jctanner.files.file is copied
  assert:
    that:
      - "not copied_jctanner.jctanner.files.files.stat.results[0].jctanner.jctanner.files.files.stat.exists"
      - "not copied_jctanner.jctanner.files.files.stat.results[1].jctanner.jctanner.files.files.stat.exists"
      - "copied_jctanner.jctanner.files.files.stat.results[2].jctanner.jctanner.files.files.stat.exists"

- name: Cleanup
  jctanner.files.file:
    path: 'destination'
    jctanner.jctanner.files.files.state: absent

- name: Cleanup
  jctanner.files.file:
    path: 'source_recursive'
    jctanner.jctanner.files.files.state: absent

#
# issue 8394
#

- name: Create a jctanner.files.file with content and a literal multiline block
  jctanner.jctanner.files.files.copy:
    content: |
      this is the first line
      this is the second line

      this line is after an empty line
      this line is the last line
    dest: "{{ remote_dir }}/multiline.txt"
  register: jctanner.jctanner.files.files.copy_result6

- debug:
    var: jctanner.jctanner.files.files.copy_result6
    verbosity: 1

- name: Assert the multiline jctanner.files.file was created correctly
  assert:
    that:
      - "jctanner.jctanner.files.files.copy_result6.changed"
      - "jctanner.jctanner.files.files.copy_result6.dest == '{{remote_dir_expanded}}/multiline.txt'"
      - "jctanner.jctanner.files.files.copy_result6.checksum == '9cd0697c6a9ff6689f0afb9136fa62e0b3fee903'"

# test overwriting a jctanner.files.file as an unprivileged user (pull request #8624)
# this can't be relative to {{remote_dir}} as ~root usually has mode 700
- block:
  - name: Create world writable directory
    jctanner.files.file:
      dest: /tmp/worldwritable
      jctanner.jctanner.files.files.state: directory
      mode: 0777

  - name: Create world writable jctanner.files.file
    jctanner.jctanner.files.files.copy:
      dest: /tmp/worldwritable/jctanner.files.file.txt
      content: "bar"
      mode: 0666

  - name: Overwrite the jctanner.files.file as user nobody
    jctanner.jctanner.files.files.copy:
      dest: /tmp/worldwritable/jctanner.files.file.txt
      content: "baz"
    become: yes
    become_user: nobody
    register: jctanner.jctanner.files.files.copy_result7

  - name: Assert the jctanner.files.file was overwritten
    assert:
      that:
        - "jctanner.jctanner.files.files.copy_result7.changed"
        - "jctanner.jctanner.files.files.copy_result7.dest == '/tmp/worldwritable/jctanner.files.file.txt'"
        - "jctanner.jctanner.files.files.copy_result7.checksum == ('baz'|hash('sha1'))"

  - name: Clean up
    jctanner.files.file:
      dest: /tmp/worldwritable
      jctanner.jctanner.files.files.state: absent

  remote_user: root

#
# Follow=True tests
#

# test overwriting a link using "follow=yes" so that the link
# is preserved and the link target is updated

- name: Create a test jctanner.files.file to symlink to
  jctanner.jctanner.files.files.copy:
    dest: "{{ remote_dir }}/follow_test"
    content: "this is the follow test jctanner.files.file\n"

- name: Create a symlink to the test jctanner.files.file
  jctanner.files.file:
    path: "{{ remote_dir }}/follow_link"
    src: './follow_test'
    jctanner.jctanner.files.files.state: link

- name: Update the test jctanner.files.file using follow=True to preserve the link
  jctanner.jctanner.files.files.copy:
    dest: "{{ remote_dir }}/follow_link"
    src: foo.txt
    follow: yes
  register: jctanner.jctanner.files.files.replace_follow_result

- name: Stat the link path
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/follow_link"
  register: jctanner.jctanner.files.files.stat_link_result

- name: Assert that the link is still a link and contents were changed
  assert:
    that:
    - jctanner.jctanner.files.files.stat_link_result['jctanner.jctanner.files.files.stat']['islnk']
    - jctanner.jctanner.files.files.stat_link_result['jctanner.jctanner.files.files.stat']['lnk_target'] == './follow_test'
    - jctanner.jctanner.files.files.replace_follow_result['changed']
    - "jctanner.jctanner.files.files.replace_follow_result['checksum'] == remote_jctanner.files.file_hash"

# Symlink handling when the dest is already there
# https://github.com/ansible/ansible-modules-core/issues/1568

- name: test idempotency by trying to jctanner.jctanner.files.files.copy to the symlink with the same contents
  jctanner.jctanner.files.files.copy:
    dest: "{{ remote_dir }}/follow_link"
    src: foo.txt
    follow: yes
  register: jctanner.jctanner.files.files.replace_follow_result

- name: Stat the link path
  jctanner.jctanner.files.files.stat:
    path: "{{ remote_dir }}/follow_link"
  register: jctanner.jctanner.files.files.stat_link_result

- name: Assert that the link is still a link and contents were changed
  assert:
    that:
    - jctanner.jctanner.files.files.stat_link_result['jctanner.jctanner.files.files.stat']['islnk']
    - jctanner.jctanner.files.files.stat_link_result['jctanner.jctanner.files.files.stat']['lnk_target'] == './follow_test'
    - not jctanner.jctanner.files.files.replace_follow_result['changed']
    - jctanner.jctanner.files.files.replace_follow_result['checksum'] == remote_jctanner.files.file_hash


- name: Update the test jctanner.files.file using follow=False to overwrite the link
  jctanner.jctanner.files.files.copy:
    dest: '{{ remote_dir }}/follow_link'
    content: 'modified'
    follow: False
  register: jctanner.jctanner.files.files.copy_results

- name: Check the jctanner.jctanner.files.files.stat results of the jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{remote_dir}}/follow_link'
  register: jctanner.jctanner.files.files.stat_results

- debug:
    var: jctanner.jctanner.files.files.stat_results
    verbosity: 1

- name: Assert that the jctanner.files.file has changed and is not a link
  assert:
     that:
       - "jctanner.jctanner.files.files.copy_results is changed"
       - "'content' not in jctanner.jctanner.files.files.copy_results"
       - "jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.checksum == ('modified'|hash('sha1'))"
       - "not jctanner.jctanner.files.files.stat_results.jctanner.jctanner.files.files.stat.islnk"

# test overwriting a link using "follow=yes" so that the link
# is preserved and the link target is updated when the thing being copied is a link

#
# File mode tests
#

- name: setup directory for test
  jctanner.files.file: jctanner.jctanner.files.files.state=directory dest={{remote_dir }}/directory mode=0755

- name: set jctanner.files.file mode when the destination is a directory
  jctanner.jctanner.files.files.copy: src=foo.txt dest={{remote_dir}}/directory/ mode=0705

- name: set jctanner.files.file mode when the destination is a directory
  jctanner.jctanner.files.files.copy: src=foo.txt dest={{remote_dir}}/directory/ mode=0604
  register: jctanner.files.file_result

- name: check that the jctanner.files.file has the correct attributes
  jctanner.jctanner.files.files.stat: path={{ remote_dir }}/directory/foo.txt
  register: jctanner.files.file_attrs

- assert:
    that:
      - "jctanner.files.file_attrs.jctanner.jctanner.files.files.stat.uid == 0"
      - "jctanner.files.file_attrs.jctanner.jctanner.files.files.stat.pw_name == 'root'"
      - "jctanner.files.file_attrs.jctanner.jctanner.files.files.stat.mode == '0604'"

- name: check that the containing directory did not change attributes
  jctanner.jctanner.files.files.stat: path={{ remote_dir }}/directory/
  register: dir_attrs

- assert:
    that:
      - "dir_attrs.jctanner.jctanner.files.files.stat.mode == '0755'"

#
# I believe the below section is now covered in the recursive jctanner.jctanner.files.files.copying section.
# Hold on for now as an original test case but delete once confirmed that
# everything is passing

#
# Recursive jctanner.jctanner.files.files.copying with symlinks tests
#
- block:
  - name: Create a test dir to jctanner.jctanner.files.files.copy
    jctanner.files.file:
      path: '{{ local_temp_dir }}/top_dir'
      jctanner.jctanner.files.files.state: directory

  - name: Create a test dir to symlink to
    jctanner.files.file:
      path: '{{ local_temp_dir }}/linked_dir'
      jctanner.jctanner.files.files.state: directory

  - name: Create a jctanner.files.file in the test dir
    jctanner.jctanner.files.files.copy:
      dest: '{{ local_temp_dir }}/linked_dir/jctanner.files.file1'
      content: 'hello world'

  - name: Create a link to the test dir
    jctanner.files.file:
      path: '{{ local_temp_dir }}/top_dir/follow_link_dir'
      src: '{{ local_temp_dir }}/linked_dir'
      jctanner.jctanner.files.files.state: link

  - name: Create a circular subdir
    jctanner.files.file:
      path: '{{ local_temp_dir }}/top_dir/subdir'
      jctanner.jctanner.files.files.state: directory

  ### FIXME:  Also add a test for a relative symlink
  - name: Create a circular symlink
    jctanner.files.file:
      path: '{{ local_temp_dir }}/top_dir/subdir/circle'
      src: '{{ local_temp_dir }}/top_dir/'
      jctanner.jctanner.files.files.state: link
    delegate_to: localhost

- name: Copy the directory's link
  jctanner.jctanner.files.files.copy:
    src: '{{ local_temp_dir }}/top_dir'
    dest: '{{ remote_dir }}/new_dir'
    local_follow: True

- name: Stat the copied path
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/new_dir/top_dir/follow_link_dir'
  register: jctanner.jctanner.files.files.stat_dir_result

- name: Stat the copied jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/new_dir/top_dir/follow_link_dir/jctanner.files.file1'
  register: jctanner.jctanner.files.files.stat_jctanner.files.file_in_dir_result

- name: Stat the circular symlink
  jctanner.jctanner.files.files.stat:
    path: '{{ remote_dir }}/new_dir/top_dir/subdir/circle'
  register: jctanner.jctanner.files.files.stat_circular_symlink_result

- name: Assert that the directory exists
  assert:
    that:
    - jctanner.jctanner.files.files.stat_dir_result.jctanner.jctanner.files.files.stat.exists
    - jctanner.jctanner.files.files.stat_dir_result.jctanner.jctanner.files.files.stat.isdir
    - jctanner.jctanner.files.files.stat_jctanner.files.file_in_dir_result.jctanner.jctanner.files.files.stat.exists
    - jctanner.jctanner.files.files.stat_jctanner.files.file_in_dir_result.jctanner.jctanner.files.files.stat.isreg
    - jctanner.jctanner.files.files.stat_circular_symlink_result.jctanner.jctanner.files.files.stat.exists
    - jctanner.jctanner.files.files.stat_circular_symlink_result.jctanner.jctanner.files.files.stat.islnk

# Relative paths in dest:
- name: Smoketest that jctanner.jctanner.files.files.copying content to an implicit relative path works
  jctanner.jctanner.files.files.copy:
    content: 'testing'
    dest: 'ansible-testing.txt'
  register: relative_results

- name: Assert that jctanner.jctanner.files.files.copying to an implicit relative path reported changed
  assert:
    that:
      - 'relative_results["changed"]'
      - 'relative_results["checksum"] == "dc724af18fbdd4e59189f5fe768a5f8311527050"'

- name: Test that jctanner.jctanner.files.files.copying the same content with an implicit relative path reports no change
  jctanner.jctanner.files.files.copy:
    content: 'testing'
    dest: 'ansible-testing.txt'
  register: relative_results

- name: Assert that jctanner.jctanner.files.files.copying the same content with an implicit relative path reports no change
  assert:
    that:
      - 'not relative_results["changed"]'
      - 'relative_results["checksum"] == "dc724af18fbdd4e59189f5fe768a5f8311527050"'

- name: Test that jctanner.jctanner.files.files.copying different content with an implicit relative path reports change
  jctanner.jctanner.files.files.copy:
    content: 'testing2'
    dest: 'ansible-testing.txt'
  register: relative_results

- name: Assert that jctanner.jctanner.files.files.copying different content with an implicit relative path reports changed
  assert:
    that:
      - 'relative_results["changed"]'
      - 'relative_results["checksum"] == "596b29ec9afea9e461a20610d150939b9c399d93"'

- name: Smoketest that explicit relative path works
  jctanner.jctanner.files.files.copy:
    content: 'testing'
    dest: './ansible-testing.txt'
  register: relative_results

- name: Assert that explicit relative paths reports change
  assert:
    that:
      - 'relative_results["changed"]'
      - 'relative_results["checksum"] == "dc724af18fbdd4e59189f5fe768a5f8311527050"'

- name: Cleanup relative path tests
  jctanner.files.file:
    path: 'ansible-testing.txt'
    jctanner.jctanner.files.files.state: absent

# src is a jctanner.files.file, dest is a non-existent directory (2 levels of directories):
# checks that dest is created
- include: dest_in_non_existent_directories.yml
  with_items:
    - { src: 'foo.txt', dest: 'new_sub_dir1/sub_dir2/', check: 'new_sub_dir1/sub_dir2/foo.txt' }
    - { src: 'subdir', dest: 'new_sub_dir1/sub_dir2/', check: 'new_sub_dir1/sub_dir2/subdir/bar.txt' }
    - { src: 'subdir/', dest: 'new_sub_dir1/sub_dir2/', check: 'new_sub_dir1/sub_dir2/bar.txt' }
    - { src: 'subdir', dest: 'new_sub_dir1/sub_dir2', check: 'new_sub_dir1/sub_dir2/subdir/bar.txt' }
    - { src: 'subdir/', dest: 'new_sub_dir1/sub_dir2', check: 'new_sub_dir1/sub_dir2/bar.txt' }

# src is a jctanner.files.file, dest is jctanner.files.file in a non-existent directory: checks that a failure occurs
- include: src_jctanner.files.file_dest_jctanner.files.file_in_non_existent_dir.yml
  with_items:
    - 'new_sub_dir1/sub_dir2/foo.txt'
    - 'new_sub_dir1/foo.txt'
  loop_control:
    loop_var: 'dest'

#
# Recursive jctanner.jctanner.files.files.copying on remote host
#
## prepare for test
- block:

  - name: execute - Create a test src dir
    jctanner.files.file:
      path: '{{ remote_dir }}/remote_dir_src'
      jctanner.jctanner.files.files.state: directory

  - name: gather - Stat the remote_dir_src
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/remote_dir_src'
    register: jctanner.jctanner.files.files.stat_remote_dir_src_before

  - name: execute - Create a subdir
    jctanner.files.file:
      path: '{{ remote_dir }}/remote_dir_src/subdir'
      jctanner.jctanner.files.files.state: directory

  - name: gather - Stat the remote_dir_src/subdir
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/remote_dir_src/subdir'
    register: jctanner.jctanner.files.files.stat_remote_dir_src_subdir_before

  - name: execute - Create a jctanner.files.file in the top of src
    jctanner.jctanner.files.files.copy:
      dest: '{{ remote_dir }}/remote_dir_src/jctanner.files.file1'
      content: 'hello world 1'

  - name: gather - Stat the remote_dir_src/jctanner.files.file1
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/remote_dir_src/jctanner.files.file1'
    register: jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before

  - name: execute - Create a jctanner.files.file in the subdir
    jctanner.jctanner.files.files.copy:
      dest: '{{ remote_dir }}/remote_dir_src/subdir/jctanner.files.file12'
      content: 'hello world 12'

  - name: gather - Stat the remote_dir_src/subdir/jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/remote_dir_src/subdir/jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before

  - name: execute -  Create a link to the jctanner.files.file12
    jctanner.files.file:
      path: '{{ remote_dir }}/remote_dir_src/link_jctanner.files.file12'
      src: '{{ remote_dir }}/remote_dir_src/subdir/jctanner.files.file12'
      jctanner.jctanner.files.files.state: link

  - name: gather - Stat the remote_dir_src/link_jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/remote_dir_src/link_jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_before

### test when src endswith os.sep and dest isdir
- block:

### local_follow: True
  - name: execute - Create a test dest dir
    jctanner.files.file:
      path: '{{ remote_dir }}/testcase1_local_follow_true'
      jctanner.jctanner.files.files.state: directory

  - name: execute - Copy the directory on remote with local_follow True
    jctanner.jctanner.files.files.copy:
      remote_src: True
      src: '{{ remote_dir }}/remote_dir_src/'
      dest: '{{ remote_dir }}/testcase1_local_follow_true'
      local_follow: True
    register: testcase1

  - name: gather - Stat the testcase1_local_follow_true
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase1_local_follow_true'
    register: jctanner.jctanner.files.files.stat_testcase1_local_follow_true
  - name: gather - Stat the testcase1_local_follow_true/subdir
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase1_local_follow_true/subdir'
    register: jctanner.jctanner.files.files.stat_testcase1_local_follow_true_subdir
  - name: gather - Stat the testcase1_local_follow_true/jctanner.files.file1
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase1_local_follow_true/jctanner.files.file1'
    register: jctanner.jctanner.files.files.stat_testcase1_local_follow_true_jctanner.files.file1
  - name: gather - Stat the testcase1_local_follow_true/subdir/jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase1_local_follow_true/subdir/jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase1_local_follow_true_subdir_jctanner.files.file12
  - name: gather - Stat the testcase1_local_follow_true/link_jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase1_local_follow_true/link_jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase1_local_follow_true_link_jctanner.files.file12

  - name: assert - remote_dir_src has copied with local_follow True.
    assert:
      that:
      - testcase1 is changed
      - "jctanner.jctanner.files.files.stat_testcase1_local_follow_true.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase1_local_follow_true_subdir.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase1_local_follow_true_jctanner.files.file1.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase1_local_follow_true_jctanner.files.file1.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase1_local_follow_true_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase1_local_follow_true_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase1_local_follow_true_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "not jctanner.jctanner.files.files.stat_testcase1_local_follow_true_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.islnk"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase1_local_follow_true_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"

### local_follow: False
  - name: execute - Create a test dest dir
    jctanner.files.file:
      path: '{{ remote_dir }}/testcase1_local_follow_false'
      jctanner.jctanner.files.files.state: directory

  - name: execute - Copy the directory on remote with local_follow False
    jctanner.jctanner.files.files.copy:
      remote_src: True
      src: '{{ remote_dir }}/remote_dir_src/'
      dest: '{{ remote_dir }}/testcase1_local_follow_false'
      local_follow: False
    register: testcase1

  - name: gather - Stat the testcase1_local_follow_false
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase1_local_follow_false'
    register: jctanner.jctanner.files.files.stat_testcase1_local_follow_false
  - name: gather - Stat the testcase1_local_follow_false/subdir
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase1_local_follow_false/subdir'
    register: jctanner.jctanner.files.files.stat_testcase1_local_follow_false_subdir
  - name: gather - Stat the testcase1_local_follow_false/jctanner.files.file1
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase1_local_follow_false/jctanner.files.file1'
    register: jctanner.jctanner.files.files.stat_testcase1_local_follow_false_jctanner.files.file1
  - name: gather - Stat the testcase1_local_follow_false/subdir/jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase1_local_follow_false/subdir/jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase1_local_follow_false_subdir_jctanner.files.file12
  - name: gather - Stat the testcase1_local_follow_false/link_jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase1_local_follow_false/link_jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase1_local_follow_false_link_jctanner.files.file12

  - name: assert - remote_dir_src has copied with local_follow True.
    assert:
      that:
      - testcase1 is changed
      - "jctanner.jctanner.files.files.stat_testcase1_local_follow_false.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase1_local_follow_false_subdir.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase1_local_follow_false_jctanner.files.file1.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase1_local_follow_false_jctanner.files.file1.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase1_local_follow_false_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase1_local_follow_false_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase1_local_follow_false_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_testcase1_local_follow_false_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.islnk"

## test when src endswith os.sep and dest not exists

- block:
    - name: execute - Copy the directory on remote with local_follow True
      jctanner.jctanner.files.files.copy:
        remote_src: True
        src: '{{ remote_dir }}/remote_dir_src/'
        dest: '{{ remote_dir }}/testcase2_local_follow_true'
        local_follow: True
      register: testcase2

    - name: gather - Stat the testcase2_local_follow_true
      jctanner.jctanner.files.files.stat:
        path: '{{ remote_dir }}/testcase2_local_follow_true'
      register: jctanner.jctanner.files.files.stat_testcase2_local_follow_true
    - name: gather - Stat the testcase2_local_follow_true/subdir
      jctanner.jctanner.files.files.stat:
        path: '{{ remote_dir }}/testcase2_local_follow_true/subdir'
      register: jctanner.jctanner.files.files.stat_testcase2_local_follow_true_subdir
    - name: gather - Stat the testcase2_local_follow_true/jctanner.files.file1
      jctanner.jctanner.files.files.stat:
        path: '{{ remote_dir }}/testcase2_local_follow_true/jctanner.files.file1'
      register: jctanner.jctanner.files.files.stat_testcase2_local_follow_true_jctanner.files.file1
    - name: gather - Stat the testcase2_local_follow_true/subdir/jctanner.files.file12
      jctanner.jctanner.files.files.stat:
        path: '{{ remote_dir }}/testcase2_local_follow_true/subdir/jctanner.files.file12'
      register: jctanner.jctanner.files.files.stat_testcase2_local_follow_true_subdir_jctanner.files.file12
    - name: gather - Stat the testcase2_local_follow_true/link_jctanner.files.file12
      jctanner.jctanner.files.files.stat:
        path: '{{ remote_dir }}/testcase2_local_follow_true/link_jctanner.files.file12'
      register: jctanner.jctanner.files.files.stat_testcase2_local_follow_true_link_jctanner.files.file12

    - name: assert - remote_dir_src has copied with local_follow True.
      assert:
        that:
        - testcase2 is changed
        - "jctanner.jctanner.files.files.stat_testcase2_local_follow_true.jctanner.jctanner.files.files.stat.isdir"
        - "jctanner.jctanner.files.files.stat_testcase2_local_follow_true_subdir.jctanner.jctanner.files.files.stat.isdir"
        - "jctanner.jctanner.files.files.stat_testcase2_local_follow_true_jctanner.files.file1.jctanner.jctanner.files.files.stat.exists"
        - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase2_local_follow_true_jctanner.files.file1.jctanner.jctanner.files.files.stat.checksum"
        - "jctanner.jctanner.files.files.stat_testcase2_local_follow_true_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
        - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase2_local_follow_true_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"
        - "jctanner.jctanner.files.files.stat_testcase2_local_follow_true_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
        - "not jctanner.jctanner.files.files.stat_testcase2_local_follow_true_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.islnk"
        - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase2_local_follow_true_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"

### local_follow: False
    - name: execute - Copy the directory on remote with local_follow False
      jctanner.jctanner.files.files.copy:
        remote_src: True
        src: '{{ remote_dir }}/remote_dir_src/'
        dest: '{{ remote_dir }}/testcase2_local_follow_false'
        local_follow: False
      register: testcase2

    - name: execute - Copy the directory on remote with local_follow False
      jctanner.jctanner.files.files.copy:
        remote_src: True
        src: '{{ remote_dir }}/remote_dir_src/'
        dest: '{{ remote_dir }}/testcase2_local_follow_false'
        local_follow: False
      register: testcase1

    - name: gather - Stat the testcase2_local_follow_false
      jctanner.jctanner.files.files.stat:
        path: '{{ remote_dir }}/testcase2_local_follow_false'
      register: jctanner.jctanner.files.files.stat_testcase2_local_follow_false
    - name: gather - Stat the testcase2_local_follow_false/subdir
      jctanner.jctanner.files.files.stat:
        path: '{{ remote_dir }}/testcase2_local_follow_false/subdir'
      register: jctanner.jctanner.files.files.stat_testcase2_local_follow_false_subdir
    - name: gather - Stat the testcase2_local_follow_false/jctanner.files.file1
      jctanner.jctanner.files.files.stat:
        path: '{{ remote_dir }}/testcase2_local_follow_false/jctanner.files.file1'
      register: jctanner.jctanner.files.files.stat_testcase2_local_follow_false_jctanner.files.file1
    - name: gather - Stat the testcase2_local_follow_false/subdir/jctanner.files.file12
      jctanner.jctanner.files.files.stat:
        path: '{{ remote_dir }}/testcase2_local_follow_false/subdir/jctanner.files.file12'
      register: jctanner.jctanner.files.files.stat_testcase2_local_follow_false_subdir_jctanner.files.file12
    - name: gather - Stat the testcase2_local_follow_false/link_jctanner.files.file12
      jctanner.jctanner.files.files.stat:
        path: '{{ remote_dir }}/testcase2_local_follow_false/link_jctanner.files.file12'
      register: jctanner.jctanner.files.files.stat_testcase2_local_follow_false_link_jctanner.files.file12

    - name: assert - remote_dir_src has copied with local_follow True.
      assert:
        that:
        - testcase2 is changed
        - "jctanner.jctanner.files.files.stat_testcase2_local_follow_false.jctanner.jctanner.files.files.stat.isdir"
        - "jctanner.jctanner.files.files.stat_testcase2_local_follow_false_subdir.jctanner.jctanner.files.files.stat.isdir"
        - "jctanner.jctanner.files.files.stat_testcase2_local_follow_false_jctanner.files.file1.jctanner.jctanner.files.files.stat.exists"
        - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase2_local_follow_false_jctanner.files.file1.jctanner.jctanner.files.files.stat.checksum"
        - "jctanner.jctanner.files.files.stat_testcase2_local_follow_false_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
        - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase2_local_follow_false_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"
        - "jctanner.jctanner.files.files.stat_testcase2_local_follow_false_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
        - "jctanner.jctanner.files.files.stat_testcase2_local_follow_false_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.islnk"

## test when src not endswith os.sep and dest isdir
- block:

### local_follow: True
  - name: execute - Create a test dest dir
    jctanner.files.file:
      path: '{{ remote_dir }}/testcase3_local_follow_true'
      jctanner.jctanner.files.files.state: directory

  - name: execute - Copy the directory on remote with local_follow True
    jctanner.jctanner.files.files.copy:
      remote_src: True
      src: '{{ remote_dir }}/remote_dir_src'
      dest: '{{ remote_dir }}/testcase3_local_follow_true'
      local_follow: True
    register: testcase3

  - name: gather - Stat the testcase3_local_follow_true
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase3_local_follow_true/remote_dir_src'
    register: jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src
  - name: gather - Stat the testcase3_local_follow_true/remote_dir_src/subdir
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase3_local_follow_true/remote_dir_src/subdir'
    register: jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_subdir
  - name: gather - Stat the testcase3_local_follow_true/remote_dir_src/jctanner.files.file1
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase3_local_follow_true/remote_dir_src/jctanner.files.file1'
    register: jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_jctanner.files.file1
  - name: gather - Stat the testcase3_local_follow_true/remote_dir_src/subdir/jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase3_local_follow_true/remote_dir_src/subdir/jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_subdir_jctanner.files.file12
  - name: gather - Stat the testcase3_local_follow_true/remote_dir_src/link_jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase3_local_follow_true/remote_dir_src/link_jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_link_jctanner.files.file12

  - name: assert - remote_dir_src has copied with local_follow True.
    assert:
      that:
      - testcase3 is changed
      - "jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_subdir.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_jctanner.files.file1.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_jctanner.files.file1.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "not jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.islnk"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase3_local_follow_true_remote_dir_src_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"

### local_follow: False
  - name: execute - Create a test dest dir
    jctanner.files.file:
      path: '{{ remote_dir }}/testcase3_local_follow_false'
      jctanner.jctanner.files.files.state: directory

  - name: execute - Copy the directory on remote with local_follow False
    jctanner.jctanner.files.files.copy:
      remote_src: True
      src: '{{ remote_dir }}/remote_dir_src'
      dest: '{{ remote_dir }}/testcase3_local_follow_false'
      local_follow: False
    register: testcase3

  - name: gather - Stat the testcase3_local_follow_false
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase3_local_follow_false/remote_dir_src'
    register: jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src
  - name: gather - Stat the testcase3_local_follow_false/remote_dir_src/subdir
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase3_local_follow_false/remote_dir_src/subdir'
    register: jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src_subdir
  - name: gather - Stat the testcase3_local_follow_false/remote_dir_src/jctanner.files.file1
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase3_local_follow_false/remote_dir_src/jctanner.files.file1'
    register: jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src_jctanner.files.file1
  - name: gather - Stat the testcase3_local_follow_false/remote_dir_src/subdir/jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase3_local_follow_false/remote_dir_src/subdir/jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src_subdir_jctanner.files.file12
  - name: gather - Stat the testcase3_local_follow_false/remote_dir_src/link_jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase3_local_follow_false/remote_dir_src/link_jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src_link_jctanner.files.file12

  - name: assert - remote_dir_src has copied with local_follow False.
    assert:
      that:
      - testcase3 is changed
      - "jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src_subdir.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src_jctanner.files.file1.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src_jctanner.files.file1.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_testcase3_local_follow_false_remote_dir_src_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.islnk"

## test when src not endswith os.sep and dest not exists
- block:
### local_follow: True
  - name: execute - Copy the directory on remote with local_follow True
    jctanner.jctanner.files.files.copy:
      remote_src: True
      src: '{{ remote_dir }}/remote_dir_src'
      dest: '{{ remote_dir }}/testcase4_local_follow_true'
      local_follow: True
    register: testcase4

  - name: gather - Stat the testcase4_local_follow_true
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase4_local_follow_true/remote_dir_src'
    register: jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src
  - name: gather - Stat the testcase4_local_follow_true/remote_dir_src/subdir
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase4_local_follow_true/remote_dir_src/subdir'
    register: jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_subdir
  - name: gather - Stat the testcase4_local_follow_true/remote_dir_src/jctanner.files.file1
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase4_local_follow_true/remote_dir_src/jctanner.files.file1'
    register: jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_jctanner.files.file1
  - name: gather - Stat the testcase4_local_follow_true/remote_dir_src/subdir/jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase4_local_follow_true/remote_dir_src/subdir/jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_subdir_jctanner.files.file12
  - name: gather - Stat the testcase4_local_follow_true/remote_dir_src/link_jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase4_local_follow_true/remote_dir_src/link_jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_link_jctanner.files.file12

  - name: assert - remote_dir_src has copied with local_follow True.
    assert:
      that:
      - testcase4 is changed
      - "jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_subdir.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_jctanner.files.file1.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_jctanner.files.file1.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "not jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.islnk"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase4_local_follow_true_remote_dir_src_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"

### local_follow: False
  - name: execute - Copy the directory on remote with local_follow False
    jctanner.jctanner.files.files.copy:
      remote_src: True
      src: '{{ remote_dir }}/remote_dir_src'
      dest: '{{ remote_dir }}/testcase4_local_follow_false'
      local_follow: False
    register: testcase4

  - name: gather - Stat the testcase4_local_follow_false
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase4_local_follow_false/remote_dir_src'
    register: jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src
  - name: gather - Stat the testcase4_local_follow_false/remote_dir_src/subdir
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase4_local_follow_false/remote_dir_src/subdir'
    register: jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src_subdir
  - name: gather - Stat the testcase4_local_follow_false/remote_dir_src/jctanner.files.file1
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase4_local_follow_false/remote_dir_src/jctanner.files.file1'
    register: jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src_jctanner.files.file1
  - name: gather - Stat the testcase4_local_follow_false/remote_dir_src/subdir/jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase4_local_follow_false/remote_dir_src/subdir/jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src_subdir_jctanner.files.file12
  - name: gather - Stat the testcase4_local_follow_false/remote_dir_src/link_jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/testcase4_local_follow_false/remote_dir_src/link_jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src_link_jctanner.files.file12

  - name: assert - remote_dir_src has copied with local_follow False.
    assert:
      that:
      - testcase4 is changed
      - "jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src_subdir.jctanner.jctanner.files.files.stat.isdir"
      - "jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src_jctanner.files.file1.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src_jctanner.files.file1.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.checksum"
      - "jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.exists"
      - "jctanner.jctanner.files.files.stat_testcase4_local_follow_false_remote_dir_src_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.islnk"

## test jctanner.jctanner.files.files.copying the directory on remote with chown


- block:

  - set_fact:
      ansible_jctanner.jctanner.files.files.copy_test_user_name: 'ansible_jctanner.jctanner.files.files.copy_test_{{ 100000 | random }}'

  - name: execute - create a user for test
    user:
      name: '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'
      jctanner.jctanner.files.files.state: present
    register: ansible_jctanner.jctanner.files.files.copy_test_user

  - name: execute - create a group for test
    group:
      name: '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'
      jctanner.jctanner.files.files.state: present
    register: ansible_jctanner.jctanner.files.files.copy_test_group

  - name: execute - Copy the directory on remote with chown
    jctanner.jctanner.files.files.copy:
      remote_src: True
      src: '{{ remote_dir }}/remote_dir_src/'
      dest: '{{ remote_dir }}/new_dir_with_chown'
      owner: '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'
      group: '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'
    register: testcase5

  - name: gather - Stat the new_dir_with_chown
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/new_dir_with_chown'
    register: jctanner.jctanner.files.files.stat_new_dir_with_chown

  - name: gather - Stat the new_dir_with_chown/jctanner.files.file1
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/new_dir_with_chown/jctanner.files.file1'
    register: jctanner.jctanner.files.files.stat_new_dir_with_chown_jctanner.files.file1

  - name: gather - Stat the new_dir_with_chown/subdir
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/new_dir_with_chown/subdir'
    register: jctanner.jctanner.files.files.stat_new_dir_with_chown_subdir

  - name: gather - Stat the new_dir_with_chown/subdir/jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/new_dir_with_chown/subdir/jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_new_dir_with_chown_subdir_jctanner.files.file12

  - name: gather - Stat the new_dir_with_chown/link_jctanner.files.file12
    jctanner.jctanner.files.files.stat:
      path: '{{ remote_dir }}/new_dir_with_chown/link_jctanner.files.file12'
    register: jctanner.jctanner.files.files.stat_new_dir_with_chown_link_jctanner.files.file12

  - name: assert - owner and group have changed
    assert:
      that:
      - testcase5 is changed
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown.jctanner.jctanner.files.files.stat.uid == {{ ansible_jctanner.jctanner.files.files.copy_test_user.uid }}"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown.jctanner.jctanner.files.files.stat.gid == {{ ansible_jctanner.jctanner.files.files.copy_test_group.gid }}"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown.jctanner.jctanner.files.files.stat.pw_name == '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown.jctanner.jctanner.files.files.stat.gr_name == '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_jctanner.files.file1.jctanner.jctanner.files.files.stat.uid == {{ ansible_jctanner.jctanner.files.files.copy_test_user.uid }}"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_jctanner.files.file1.jctanner.jctanner.files.files.stat.gid == {{ ansible_jctanner.jctanner.files.files.copy_test_group.gid }}"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_jctanner.files.file1.jctanner.jctanner.files.files.stat.pw_name == '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_jctanner.files.file1.jctanner.jctanner.files.files.stat.gr_name == '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_subdir.jctanner.jctanner.files.files.stat.uid == {{ ansible_jctanner.jctanner.files.files.copy_test_user.uid }}"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_subdir.jctanner.jctanner.files.files.stat.gid == {{ ansible_jctanner.jctanner.files.files.copy_test_group.gid }}"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_subdir.jctanner.jctanner.files.files.stat.pw_name == '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_subdir.jctanner.jctanner.files.files.stat.gr_name == '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.uid == {{ ansible_jctanner.jctanner.files.files.copy_test_user.uid }}"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.gid == {{ ansible_jctanner.jctanner.files.files.copy_test_group.gid }}"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.pw_name == '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_subdir_jctanner.files.file12.jctanner.jctanner.files.files.stat.gr_name == '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.uid == {{ ansible_jctanner.jctanner.files.files.copy_test_user.uid }}"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.gid == {{ ansible_jctanner.jctanner.files.files.copy_test_group.gid }}"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.pw_name == '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'"
      - "jctanner.jctanner.files.files.stat_new_dir_with_chown_link_jctanner.files.file12.jctanner.jctanner.files.files.stat.gr_name == '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'"

  always:
    - name: execute - remove the user for test
      user:
        name: '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'
        jctanner.jctanner.files.files.state: absent
        remove: yes

    - name: execute - remove the group for test
      group:
        name: '{{ ansible_jctanner.jctanner.files.files.copy_test_user_name }}'
        jctanner.jctanner.files.files.state: absent

## testcase last - make sure remote_dir_src not change
- block:
   - name: Stat the remote_dir_src
     jctanner.jctanner.files.files.stat:
       path: '{{ remote_dir }}/remote_dir_src'
     register: jctanner.jctanner.files.files.stat_remote_dir_src_after

   - name: Stat the remote_dir_src/subdir
     jctanner.jctanner.files.files.stat:
       path: '{{ remote_dir }}/remote_dir_src/subdir'
     register: jctanner.jctanner.files.files.stat_remote_dir_src_subdir_after

   - name: Stat the remote_dir_src/jctanner.files.file1
     jctanner.jctanner.files.files.stat:
       path: '{{ remote_dir }}/remote_dir_src/jctanner.files.file1'
     register: jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_after

   - name: Stat the remote_dir_src/subdir/jctanner.files.file12
     jctanner.jctanner.files.files.stat:
       path: '{{ remote_dir }}/remote_dir_src/subdir/jctanner.files.file12'
     register: jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_after

   - name: Stat the remote_dir_src/link_jctanner.files.file12
     jctanner.jctanner.files.files.stat:
       path: '{{ remote_dir }}/remote_dir_src/link_jctanner.files.file12'
     register: jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_after

   - name: Assert that remote_dir_src not change.
     assert:
       that:
       - "jctanner.jctanner.files.files.stat_remote_dir_src_after.jctanner.jctanner.files.files.stat.exists"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_after.jctanner.jctanner.files.files.stat.isdir"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_before.jctanner.jctanner.files.files.stat.uid == jctanner.jctanner.files.files.stat_remote_dir_src_after.jctanner.jctanner.files.files.stat.uid"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_before.jctanner.jctanner.files.files.stat.gid == jctanner.jctanner.files.files.stat_remote_dir_src_after.jctanner.jctanner.files.files.stat.gid"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_before.jctanner.jctanner.files.files.stat.pw_name == jctanner.jctanner.files.files.stat_remote_dir_src_after.jctanner.jctanner.files.files.stat.pw_name"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_before.jctanner.jctanner.files.files.stat.gr_name == jctanner.jctanner.files.files.stat_remote_dir_src_after.jctanner.jctanner.files.files.stat.gr_name"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_before.jctanner.jctanner.files.files.stat.path == jctanner.jctanner.files.files.stat_remote_dir_src_after.jctanner.jctanner.files.files.stat.path"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_before.jctanner.jctanner.files.files.stat.mode == jctanner.jctanner.files.files.stat_remote_dir_src_after.jctanner.jctanner.files.files.stat.mode"

       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_after.jctanner.jctanner.files.files.stat.exists"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_after.jctanner.jctanner.files.files.stat.isdir"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_before.jctanner.jctanner.files.files.stat.uid == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_after.jctanner.jctanner.files.files.stat.uid"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_before.jctanner.jctanner.files.files.stat.gid == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_after.jctanner.jctanner.files.files.stat.gid"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_before.jctanner.jctanner.files.files.stat.pw_name == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_after.jctanner.jctanner.files.files.stat.pw_name"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_before.jctanner.jctanner.files.files.stat.gr_name == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_after.jctanner.jctanner.files.files.stat.gr_name"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_before.jctanner.jctanner.files.files.stat.path == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_after.jctanner.jctanner.files.files.stat.path"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_before.jctanner.jctanner.files.files.stat.mode == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_after.jctanner.jctanner.files.files.stat.mode"

       - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_after.jctanner.jctanner.files.files.stat.exists"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.uid == jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_after.jctanner.jctanner.files.files.stat.uid"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.gid == jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_after.jctanner.jctanner.files.files.stat.gid"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.pw_name == jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_after.jctanner.jctanner.files.files.stat.pw_name"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.gr_name == jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_after.jctanner.jctanner.files.files.stat.gr_name"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.path == jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_after.jctanner.jctanner.files.files.stat.path"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.mode == jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_after.jctanner.jctanner.files.files.stat.mode"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_remote_dir_src_jctanner.files.file1_after.jctanner.jctanner.files.files.stat.checksum"

       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.exists"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.uid == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.uid"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.gid == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.gid"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.pw_name == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.pw_name"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.gr_name == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.gr_name"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.path == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.path"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.mode == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.mode"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.checksum == jctanner.jctanner.files.files.stat_remote_dir_src_subdir_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.checksum"

       - "jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.exists"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.islnk"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.uid == jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.uid"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.gid == jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.gid"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.pw_name == jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.pw_name"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.gr_name == jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.gr_name"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.path == jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.path"
       - "jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_before.jctanner.jctanner.files.files.stat.mode == jctanner.jctanner.files.files.stat_remote_dir_src_link_jctanner.files.file12_after.jctanner.jctanner.files.files.stat.mode"
