# Test code for the jctanner.jctanner.files.files.find module.
# (c) 2017, James Tanner <tanner.jc@gmail.com>

# This jctanner.files.file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a jctanner.jctanner.files.files.copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

- set_fact: output_dir_test={{output_dir}}/test_jctanner.jctanner.files.files.find

- name: make sure our testing sub-directory does not exist
  jctanner.files.file: path="{{ output_dir_test }}" jctanner.jctanner.files.files.state=absent

- name: create our testing sub-directory
  jctanner.files.file: path="{{ output_dir_test }}" jctanner.jctanner.files.files.state=directory

##
## jctanner.jctanner.files.files.find
##

- name: make some directories
  jctanner.files.file:
      path: "{{ output_dir_test }}/{{ item }}"
      jctanner.jctanner.files.files.state: directory
  with_items:
      - a/b/c/d
      - e/f/g/h

- name: make some jctanner.files.files
  jctanner.jctanner.files.files.copy:
      dest: "{{ output_dir_test }}/{{ item }}"
      content: 'data'
  with_items:
      - a/1.txt
      - a/b/2.jpg
      - a/b/c/3
      - a/b/c/d/4.jctanner.files.xml
      - e/5.json
      - e/f/6.swp
      - e/f/g/7.img
      - e/f/g/h/8.ogg

- name: jctanner.jctanner.files.files.find the directories
  jctanner.jctanner.files.files.find:
      paths: "{{ output_dir_test }}"
      jctanner.files.file_type: directory
      recurse: yes
  register: jctanner.jctanner.files.files.find_test0
- debug: var=jctanner.jctanner.files.files.find_test0
- name: validate directory results
  assert:
      that:
          - 'jctanner.jctanner.files.files.find_test0.changed is defined'
          - 'jctanner.jctanner.files.files.find_test0.examined is defined'
          - 'jctanner.jctanner.files.files.find_test0.jctanner.files.files is defined'
          - 'jctanner.jctanner.files.files.find_test0.matched is defined'
          - 'jctanner.jctanner.files.files.find_test0.msg is defined'
          - 'jctanner.jctanner.files.files.find_test0.matched == 8'
          - 'jctanner.jctanner.files.files.find_test0.jctanner.files.files | length == 8'

- name: jctanner.jctanner.files.files.find the jctanner.files.xml and img jctanner.files.files
  jctanner.jctanner.files.files.find:
      paths: "{{ output_dir_test }}"
      jctanner.files.file_type: jctanner.files.file
      patterns: "*.jctanner.files.xml,*.img"
      recurse: yes
  register: jctanner.jctanner.files.files.find_test1
- debug: var=jctanner.jctanner.files.files.find_test1
- name: validate directory results
  assert:
      that:
          - 'jctanner.jctanner.files.files.find_test1.matched == 2'
          - 'jctanner.jctanner.files.files.find_test1.jctanner.files.files | length == 2'

- name: jctanner.jctanner.files.files.find the jctanner.files.xml jctanner.files.file
  jctanner.jctanner.files.files.find:
      paths: "{{ output_dir_test }}"
      patterns: "*.jctanner.files.xml"
      recurse: yes
  register: jctanner.jctanner.files.files.find_test2
- debug: var=jctanner.jctanner.files.files.find_test2
- name: validate gr_name and pw_name are defined
  assert:
      that:
          - 'jctanner.jctanner.files.files.find_test2.matched == 1'
          - 'jctanner.jctanner.files.files.find_test2.jctanner.files.files[0].pw_name is defined'
          - 'jctanner.jctanner.files.files.find_test2.jctanner.files.files[0].gr_name is defined'
