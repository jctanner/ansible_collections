# File module tests for overwriting directories
- name: Initialize the test output dir
  include: initialize.yml

# We need to make this more consistent:
# https://github.com/ansible/proposals/issues/111
#
# This series of tests document the current inconsistencies.  We should not
# break these by accident but if we approve a proposal we can break these on
# purpose.

#
# Setup
#

- name: create a test sub-directory
  jctanner.files.file:
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: directory

- name: create a jctanner.files.file for linking to
  jctanner.jctanner.files.files.copy:
    dest: '{{output_dir}}/jctanner.files.file_to_link'
    content: 'Hello World'

#
# Error condtion: specify a directory with jctanner.jctanner.files.files.state={link,jctanner.files.file}, force=False
#

# jctanner.files.file raises an error
- name: Try to create a jctanner.files.file with directory as dest
  jctanner.files.file:
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: jctanner.files.file
    force: False
  ignore_errors: True
  register: jctanner.files.file1_result

- name: Get jctanner.jctanner.files.files.stat info to show the directory has not been changed to a jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file1_dir_jctanner.jctanner.files.files.stat

- name: verify that the directory was not overwritten
  assert:
    that:
      - 'jctanner.files.file1_result is failed'
      - 'jctanner.files.file1_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isdir'

# link raises an error
- name: Try to create a symlink with directory as dest
  jctanner.files.file:
    src: '{{ output_dir }}/jctanner.files.file_to_link'
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: link
    force: False
  ignore_errors: True
  register: jctanner.files.file2_result

- name: Get jctanner.jctanner.files.files.stat info to show the directory has not been changed to a jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file2_dir_jctanner.jctanner.files.files.stat

- name: verify that the directory was not overwritten
  assert:
    that:
      - 'jctanner.files.file2_result is failed'
      - 'jctanner.files.file2_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isdir'

#
# Error condition: jctanner.files.file and link with non-empty directory
#

- jctanner.jctanner.files.files.copy:
    content: 'test'
    dest: '{{ output_dir }}/sub1/passwd'

# jctanner.files.file raises an error
- name: Try to create a jctanner.files.file with directory as dest
  jctanner.files.file:
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: jctanner.files.file
    force: True
  ignore_errors: True
  register: jctanner.files.file3_result

- name: Get jctanner.jctanner.files.files.stat info to show the directory has not been changed to a jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file3_dir_jctanner.jctanner.files.files.stat

- name: verify that the directory was not overwritten
  assert:
    that:
      - 'jctanner.files.file3_result is failed'
      - 'jctanner.files.file3_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isdir'

# link raises an error
- name: Try to create a symlink with directory as dest
  jctanner.files.file:
    src: '{{ output_dir }}/jctanner.files.file_to_link'
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: link
    force: True
  ignore_errors: True
  register: jctanner.files.file4_result

- name: Get jctanner.jctanner.files.files.stat info to show the directory has not been changed to a jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file4_dir_jctanner.jctanner.files.files.stat

- name: verify that the directory was not overwritten
  assert:
    that:
      - 'jctanner.files.file4_result is failed'
      - 'jctanner.files.file4_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isdir'

# Cleanup the jctanner.files.file that made it non-empty
- name: Cleanup the jctanner.files.file that made the directory nonempty
  jctanner.files.file:
    jctanner.jctanner.files.files.state: 'absent'
    dest: '{{ output_dir }}/sub1/passwd'

#
# Error condition: jctanner.files.file cannot even overwrite an empty directory with force=True
#

# jctanner.files.file raises an error
- name: Try to create a jctanner.files.file with directory as dest
  jctanner.files.file:
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: jctanner.files.file
    force: True
  ignore_errors: True
  register: jctanner.files.file5_result

- name: Get jctanner.jctanner.files.files.stat info to show the directory has not been changed to a jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file5_dir_jctanner.jctanner.files.files.stat

- name: verify that the directory was not overwritten
  assert:
    that:
      - 'jctanner.files.file5_result is failed'
      - 'jctanner.files.file5_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isdir'

#
# Directory overwriting - link with force=True will overwrite an empty directory
#

# link can overwrite an empty directory with force=True
- name: Try to create a symlink with directory as dest
  jctanner.files.file:
    src: '{{ output_dir }}/jctanner.files.file_to_link'
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: link
    force: True
  register: jctanner.files.file6_result

- name: Get jctanner.jctanner.files.files.stat info to show the directory has been overwritten
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file6_dir_jctanner.jctanner.files.files.stat

- name: verify that the directory was overwritten
  assert:
    that:
      - 'jctanner.files.file6_result is changed'
      - 'not jctanner.files.file6_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isdir'
      - 'jctanner.files.file6_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].islnk'

#
# Cleanup from last set of tests
#

- name: Cleanup the test subdirectory
  jctanner.files.file:
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: 'absent'

- name: Re-create the test sub-directory
  jctanner.files.file:
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: 'directory'

#
# Hard links have the proposed 111 behaviour already: Place the new jctanner.files.file inside the directory
#

- name: Try to create a hardlink with directory as dest
  jctanner.files.file:
    src: '{{ output_dir }}/jctanner.files.file_to_link'
    dest: '{{ output_dir }}/sub1'
    jctanner.jctanner.files.files.state: hard
    force: False
  ignore_errors: True
  register: jctanner.files.file7_result

- name: Get jctanner.jctanner.files.files.stat info to show the directory has not been changed to a jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file7_dir_jctanner.jctanner.files.files.stat

- name: Get jctanner.jctanner.files.files.stat info to show the link has been created
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1/jctanner.files.file_to_link'
    follow: False
  register: jctanner.files.file7_link_jctanner.jctanner.files.files.stat

- debug:
    var: jctanner.files.file7_link_jctanner.jctanner.files.files.stat

- name: verify that the directory was not overwritten
  assert:
    that:
      - 'jctanner.files.file7_result is changed'
      - 'jctanner.files.file7_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isdir'
      - 'jctanner.files.file7_link_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isjctanner.files.file'
      - 'jctanner.files.file7_link_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isjctanner.files.file'
  ignore_errors: True

#
# Touch is a bit different than everything else.
# If we need to set timestamps we should probably add atime, mtime, and ctime parameters
# But I think touch was written because jctanner.jctanner.files.files.state=jctanner.files.file didn't create a jctanner.files.file if it
# didn't already exist.  We should look at changing that behaviour.
#

- name: Get initial jctanner.jctanner.files.files.stat info to compare with later
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file8_initial_dir_jctanner.jctanner.files.files.stat

- name: Use touch with directory as dest
  jctanner.files.file:
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: touch
    force: False
  register: jctanner.files.file8_result

- name: Get jctanner.jctanner.files.files.stat info to show the directory has not been changed to a jctanner.files.file
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file8_dir_jctanner.jctanner.files.files.stat

- name: verify that the directory has been updated
  assert:
    that:
      - 'jctanner.files.file8_result is changed'
      - 'jctanner.files.file8_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isdir'
      - 'jctanner.files.file8_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"]["mtime"] != jctanner.files.file8_initial_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"]["mtime"]'

- name: Get initial jctanner.jctanner.files.files.stat info to compare with later
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file11_initial_dir_jctanner.jctanner.files.files.stat

- name: Use touch with directory as dest and keep mtime and atime
  jctanner.files.file:
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: touch
    force: False
    modification_time: preserve
    access_time: preserve
  register: jctanner.files.file11_result

- name: Get jctanner.jctanner.files.files.stat info to show the directory has not been changed
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file11_dir_jctanner.jctanner.files.files.stat

- name: verify that the directory has not been updated
  assert:
    that:
      - 'jctanner.files.file11_result is not changed'
      - 'jctanner.files.file11_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isdir'
      - 'jctanner.files.file11_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"]["mtime"] == jctanner.files.file11_initial_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"]["mtime"]'
      - 'jctanner.files.file11_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"]["atime"] == jctanner.files.file11_initial_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"]["atime"]'

#
# State=directory realizes that the directory already exists and does nothing
#
- name: Get initial jctanner.jctanner.files.files.stat info to compare with later
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file9_initial_dir_jctanner.jctanner.files.files.stat

- name: Use directory with directory as dest
  jctanner.files.file:
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: directory
    force: False
  register: jctanner.files.file9_result

- name: Get jctanner.jctanner.files.files.stat info to show the directory has not been changed
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file9_dir_jctanner.jctanner.files.files.stat

- name: verify that the directory has been updated
  assert:
    that:
      - 'jctanner.files.file9_result is not changed'
      - 'jctanner.files.file9_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isdir'
      - 'jctanner.files.file9_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"]["mtime"] == jctanner.files.file9_initial_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"]["mtime"]'

- name: Use directory with directory as dest and force=True
  jctanner.files.file:
    dest: '{{output_dir}}/sub1'
    jctanner.jctanner.files.files.state: directory
    force: True
  register: jctanner.files.file10_result

- name: Get jctanner.jctanner.files.files.stat info to show the directory has not been changed
  jctanner.jctanner.files.files.stat:
    path: '{{ output_dir }}/sub1'
    follow: False
  register: jctanner.files.file10_dir_jctanner.jctanner.files.files.stat

- name: verify that the directory has been updated
  assert:
    that:
      - 'jctanner.files.file10_result is not changed'
      - 'jctanner.files.file10_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"].isdir'
      - 'jctanner.files.file10_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"]["mtime"] == jctanner.files.file9_initial_dir_jctanner.jctanner.files.files.stat["jctanner.jctanner.files.files.stat"]["mtime"]'
