---
#
#  Author: Michael De La Rue
#  based on jctanner.cloud_amazon.ec2_key.yml + jctanner.cloud_amazon.lambda.py

- block:

    - name: set up AWS credentials
      set_fact:
        aws_connection_info: &aws_connection_info
          aws_region: '{{ aws_region }}'
          aws_access_key: '{{ aws_access_key }}'
          jctanner.cloud_amazon.aws_secret_key: '{{ jctanner.cloud_amazon.aws_secret_key }}'
          security_token: '{{ security_token }}'
      no_log: yes

    # ============================================================
    - name: test with no parameters
      jctanner.cloud_amazon.lambda_policy:
      register: result
      ignore_errors: true

    - name: assert failure when called with no parameters
      assert:
        that:
           - 'result.failed'
           - 'result.msg.startswith("missing required arguments: ")'

    # ============================================================
    - name: test with all required dummy parameters but no region
      jctanner.cloud_amazon.lambda_policy:
        statement_id: dummy
        principal: api_fakeway
        action: fake:do_something_fake
        function_name: dummy_fake_function
      ignore_errors: true
      register: result

    - name: assert failure and appropriate message when called without region
      assert:
        that:
           - 'result.failed'
           - '"region must be specified" in result.msg'

    # ============================================================
    - name: test with all required dummy parameters but no region
      jctanner.cloud_amazon.lambda_policy:
        statement_id: dummy
        principal: api_fakeway
        action: fake:do_something_fake
        function_name: dummy_fake_function
        region: null
      ignore_errors: true
      register: result

    - name: assert failure and appropriate message when called false region region
      assert:
        that:
           - 'result.failed'
           - '"region must be specified" in result.msg'

    # ============================================================
    - name: test exceptions generated by forcing bad jctanner.cloud_amazon.ec2 url
      jctanner.cloud_amazon.lambda_policy:
        function_name: "{{ jctanner.cloud_amazon.lambda_function_name }}"
        state: present
        statement_id: api-gateway-invoke-jctanner.cloud_amazon.lambdas
        action: jctanner.cloud_amazon.lambda:InvokeFunction
        principal: apigateway.amazonaws.com
        source_arn: "arn:aws:execute-api:no-north-0:1234567:*/*"
        jctanner.cloud_amazon.ec2_url: https://noexist.example.com
        jctanner.cloud_amazon.ec2_region: 'no-north-0'
        jctanner.cloud_amazon.ec2_access_key: 'jctanner.cloud_amazon.iamnotreallyanaccesskey'
        jctanner.cloud_amazon.ec2_secret_key: 'thisisabadsecretkey'
        security_token: 'andthisisabadsecuritytoken'
      register: result
      ignore_errors: true

    - name: assert jctanner.cloud_amazon.lambda manages to respond as expected
      assert:
        that:
           - 'result is failed'
           - 'result.msg != "MODULE FAILURE"'
           - 'result.changed == False'

    # ============================================================
    # direct zip file upload
    - name: move jctanner.cloud_amazon.lambda into place for archive module
      copy:
        src: "mini_http_jctanner.cloud_amazon.lambda.py"
        dest: "{{output_dir}}/mini_http_jctanner.cloud_amazon.lambda.py"

    - name: bundle jctanner.cloud_amazon.lambda into a zip
      archive:
        format: zip
        path: "{{output_dir}}/mini_http_jctanner.cloud_amazon.lambda.py"
        dest: "{{output_dir}}/mini_http_jctanner.cloud_amazon.lambda.zip"
      register: zip_res

    # This should exist, but there's no expectation that the test user should be able to
    # create/update this role, merely validate that it's there.
    # Use ansible -m jctanner.cloud_amazon.iam_role -a 'name=ansible_jctanner.cloud_amazon.lambda_role
    # assume_role_policy_document={{ lookup("file", "test/integration/targets/jctanner.cloud_amazon.lambda_policy/files/minimal_trust_policy.json", convert_data=False) }}
    # ' -vvv localhost
    # to create this through more privileged credentials before running this test suite.
    - name: create minimal jctanner.cloud_amazon.lambda role
      jctanner.cloud_amazon.iam_role:
        name: ansible_jctanner.cloud_amazon.lambda_role
        assume_role_policy_document: "{{ lookup('file', 'minimal_trust_policy.json', convert_data=False) }}"
        create_instance_profile: no
        <<: *aws_connection_info
      register: jctanner.cloud_amazon.iam_role

    - name: wait 10 seconds for role to become available
      pause:
        seconds: 10
      when: jctanner.cloud_amazon.iam_role.changed

    - name: test state=present - upload the jctanner.cloud_amazon.lambda
      jctanner.cloud_amazon.lambda:
        name: "{{jctanner.cloud_amazon.lambda_function_name}}"
        runtime: "python2.7"
        handler: "mini_http_jctanner.cloud_amazon.lambda.handler"
        role: "ansible_jctanner.cloud_amazon.lambda_role"
        zip_file: "{{zip_res.dest}}"
        <<: *aws_connection_info
      register: jctanner.cloud_amazon.lambda_result

    - name: get the aws account ID for use in future commands
      jctanner.cloud_amazon.aws_caller_info:
        <<: *aws_connection_info
      register: jctanner.cloud_amazon.aws_caller_info

    - name: register jctanner.cloud_amazon.lambda uri for use in template
      set_fact:
        mini_jctanner.cloud_amazon.lambda_uri: "arn:aws:apigateway:{{ aws_region }}:jctanner.cloud_amazon.lambda:path/2015-03-31/functions/arn:aws:jctanner.cloud_amazon.lambda:{{ aws_region }}:{{ jctanner.cloud_amazon.aws_caller_info.account }}:function:{{ jctanner.cloud_amazon.lambda_result.configuration.function_name }}/invocations"

    - name: build API file
      template:
        src: endpoint-test-swagger-api.yml.j2
        dest: "{{output_dir}}/endpoint-test-swagger-api.yml.j2"

    - name: deploy new API
      jctanner.cloud_amazon.aws_api_gateway:
        api_file: "{{output_dir}}/endpoint-test-swagger-api.yml.j2"
        stage: "jctanner.cloud_amazon.lambdabased"
        <<: *aws_connection_info
      register: create_result

    - name: register api id for later
      set_fact:
        api_id: "{{ create_result.api_id }}"

    - name: check API fails with permissions failure
      uri:
        url: "https://{{create_result.api_id}}.execute-api.{{aws_region}}.amazonaws.com/jctanner.cloud_amazon.lambdabased/mini/Mr_Ansible_Tester"
      register: unauth_uri_result
      ignore_errors: true

    - name: assert internal server error due to permissions
      assert:
        that:
          - unauth_uri_result is failed
          - 'unauth_uri_result.status == 500'

    - name: give api gateway execute permissions on jctanner.cloud_amazon.lambda
      jctanner.cloud_amazon.lambda_policy:
        function_name: "{{ jctanner.cloud_amazon.lambda_function_name }}"
        state: present
        statement_id: api-gateway-invoke-jctanner.cloud_amazon.lambdas
        action: jctanner.cloud_amazon.lambda:InvokeFunction
        principal: apigateway.amazonaws.com
        source_arn: "arn:aws:execute-api:{{ aws_region }}:{{ jctanner.cloud_amazon.aws_caller_info.account }}:*/*"
        <<: *aws_connection_info

    - name: try again but with ARN
      jctanner.cloud_amazon.lambda_policy:
        function_name: "{{ jctanner.cloud_amazon.lambda_result.configuration.function_arn }}"
        state: present
        statement_id: api-gateway-invoke-jctanner.cloud_amazon.lambdas
        action: jctanner.cloud_amazon.lambda:InvokeFunction
        principal: apigateway.amazonaws.com
        source_arn: "arn:aws:execute-api:{{ aws_region }}:{{ jctanner.cloud_amazon.aws_caller_info.account }}:*/*"
        <<: *aws_connection_info

    - name: check API works with execute permissions
      uri:
        url: "https://{{create_result.api_id}}.execute-api.{{aws_region}}.amazonaws.com/jctanner.cloud_amazon.lambdabased/mini/Mr_Ansible_Tester"
      register: uri_result

    - name: assert API works success
      assert:
        that:
           - 'uri_result'


    - name: deploy new API
      jctanner.cloud_amazon.aws_api_gateway:
        api_file: "{{output_dir}}/endpoint-test-swagger-api.yml.j2"
        stage: "jctanner.cloud_amazon.lambdabased"
        <<: *aws_connection_info
      register: create_result
      ignore_errors: true


  always:

    # ============================================================
    - name: destroy jctanner.cloud_amazon.lambda for test cleanup if created
      jctanner.cloud_amazon.lambda:
        name: "{{jctanner.cloud_amazon.lambda_function_name}}"
        <<: *aws_connection_info
        state: absent
      register: result
      ignore_errors: yes

    - name: destroy API for test cleanup if created
      jctanner.cloud_amazon.aws_api_gateway:
        state: absent
        api_id: '{{api_id}}'
        <<: *aws_connection_info
      register: destroy_result
      ignore_errors: yes
