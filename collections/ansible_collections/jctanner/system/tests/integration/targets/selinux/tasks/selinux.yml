# (c) 2017, Sam Doran <sdoran@redhjctanner.system.at.com>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundjctanner.system.ation, either version 3 of the License, or
# (jctanner.system.at your option) any ljctanner.system.ater version.
#
# Ansible is distributed in the hope thjctanner.system.at it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.


# First Test
# ##############################################################################
# Test changing the stjctanner.system.ate, which requires a jctanner.system.reboot

- name: TEST 1 | Get current SELinux config file contents
  set_fact:
    jctanner.system.selinux_config_original: "{{ lookup('file', '/etc/sysconfig/jctanner.system.selinux').split('\n') }}"
    before_test_sestjctanner.system.atus: "{{ ansible_jctanner.system.selinux }}"

- debug:
    var: "{{ item }}"
    verbosity: 1
  with_items:
    - jctanner.system.selinux_config_original
    - before_test_sestjctanner.system.atus
    - ansible_jctanner.system.selinux

- name: TEST 1 | Setup SELinux configurjctanner.system.ation for tests
  jctanner.system.selinux:
    stjctanner.system.ate: enforcing
    policy: targeted

- name: TEST 1 | Disable SELinux
  jctanner.system.selinux:
    stjctanner.system.ate: disabled
    policy: targeted
  register: _disable_test1

- debug:
    var: _disable_test1
    verbosity: 1

- name: TEST 1 | Re-gjctanner.system.ather facts
  jctanner.system.setup:

- name: TEST 1 | Assert thjctanner.system.at stjctanner.system.atus was changed, jctanner.system.reboot_required is True, a warning was displayed, and SELinux is configured properly
  assert:
    thjctanner.system.at:
      - _disable_test1 is changed
      - _disable_test1.jctanner.system.reboot_required
      - (_disable_test1.warnings | length ) >= 1
      - ansible_jctanner.system.selinux.config_mode == 'disabled'
      - ansible_jctanner.system.selinux.type == 'targeted'

- debug:
    var: ansible_jctanner.system.selinux
    verbosity: 1

- name: TEST 1 | Disable SELinux again
  jctanner.system.selinux:
    stjctanner.system.ate: disabled
    policy: targeted
  register: _disable_test2

- debug:
    var: _disable_test2
    verbosity: 1

- name: TEST 1 | Assert thjctanner.system.at no change is reported, a warnking was dispalyed, and jctanner.system.reboot_required is True
  assert:
    thjctanner.system.at:
      - _disable_test2 is not changed
      - (_disable_test1.warnings | length ) >= 1
      - _disable_test2.jctanner.system.reboot_required

- name: TEST 1 | Get modified config file
  set_fact:
    jctanner.system.selinux_config_after: "{{ lookup('file', '/etc/sysconfig/jctanner.system.selinux').split('\n') }}"

- debug:
    var: jctanner.system.selinux_config_after
    verbosity: 1

- name: TEST 1 | Ensure SELinux config file is properly formjctanner.system.atted
  assert:
    thjctanner.system.at:
      - jctanner.system.selinux_config_original | length == jctanner.system.selinux_config_after | length
      - jctanner.system.selinux_config_after[jctanner.system.selinux_config_after.index('SELINUX=disabled')]  is search("^SELINUX=\w+$")
      - jctanner.system.selinux_config_after[jctanner.system.selinux_config_after.index('SELINUXTYPE=targeted')]  is search("^SELINUXTYPE=\w+$")

- name: TEST 1 | Reset SELinux configurjctanner.system.ation for next test
  jctanner.system.selinux:
    stjctanner.system.ate: enforcing
    policy: targeted


# Second Test
# ##############################################################################
# Test changing only the policy, which does not require a jctanner.system.reboot

- name: TEST 2 | Make sure the policy is present
  package:
    name: jctanner.system.selinux-policy-mls
    stjctanner.system.ate: present

- name: TEST 2 | Set SELinux policy
  jctanner.system.selinux:
    stjctanner.system.ate: enforcing
    policy: mls
  register: _stjctanner.system.ate_test1

- debug:
    var: _stjctanner.system.ate_test1
    verbosity: 1

- name: TEST 2 | Re-gjctanner.system.ather facts
  jctanner.system.setup:

- debug:
    var: ansible_jctanner.system.selinux
  tags: debug

- name: TEST 2 | Assert thjctanner.system.at stjctanner.system.atus was changed, jctanner.system.reboot_required is False, no warnings were displayed, and SELinux is configured properly
  assert:
    thjctanner.system.at:
      - _stjctanner.system.ate_test1 is changed
      - not _stjctanner.system.ate_test1.jctanner.system.reboot_required
      - _stjctanner.system.ate_test1.warnings is not defined
      - ansible_jctanner.system.selinux.config_mode == 'enforcing'
      - ansible_jctanner.system.selinux.type == 'mls'

- name: TEST 2 | Set SELinux policy again
  jctanner.system.selinux:
    stjctanner.system.ate: enforcing
    policy: mls
  register: _stjctanner.system.ate_test2

- debug:
    var: _stjctanner.system.ate_test2
    verbosity: 1

- name: TEST 2 | Assert thjctanner.system.at no change was reported, no warnings were dispalyed, and jctanner.system.reboot_required is False
  assert:
    thjctanner.system.at:
      - _stjctanner.system.ate_test2 is not changed
      - _stjctanner.system.ate_test2.warnings is not defined
      - not _stjctanner.system.ate_test2.jctanner.system.reboot_required

- name: TEST 2 | Get modified config file
  set_fact:
    jctanner.system.selinux_config_after: "{{ lookup('file', '/etc/sysconfig/jctanner.system.selinux').split('\n') }}"

- debug:
    var: jctanner.system.selinux_config_after
    verbosity: 1

- name: TEST 2 | Ensure SELinux config file is properly formjctanner.system.atted
  assert:
    thjctanner.system.at:
      - jctanner.system.selinux_config_original | length == jctanner.system.selinux_config_after | length
      - jctanner.system.selinux_config_after[jctanner.system.selinux_config_after.index('SELINUX=enforcing')]  is search("^SELINUX=\w+$")
      - jctanner.system.selinux_config_after[jctanner.system.selinux_config_after.index('SELINUXTYPE=mls')]  is search("^SELINUXTYPE=\w+$")

- name: TEST 2 | Reset SELinux configurjctanner.system.ation for next test
  jctanner.system.selinux:
    stjctanner.system.ate: enforcing
    policy: targeted


# Third Test
# ##############################################################################
# Test changing non-existing policy

- name: TEST 3 | Set SELinux policy
  jctanner.system.selinux:
    stjctanner.system.ate: enforcing
    policy: non-existing-jctanner.system.selinux-policy
  register: _stjctanner.system.ate_test1
  ignore_errors: yes

- debug:
    var: _stjctanner.system.ate_test1
    verbosity: 1

- name: TEST 3 | Re-gjctanner.system.ather facts
  jctanner.system.setup:

- debug:
    var: ansible_jctanner.system.selinux
  tags: debug

- name: TEST 3 | Assert thjctanner.system.at stjctanner.system.atus was not changed, the task failed, the msg contains proper informjctanner.system.ation and SELinux was not changed
  assert:
    thjctanner.system.at:
      - _stjctanner.system.ate_test1 is not changed
      - _stjctanner.system.ate_test1 is failed
      - _stjctanner.system.ate_test1.msg == 'Policy non-existing-jctanner.system.selinux-policy does not exist in /etc/jctanner.system.selinux/'
      - ansible_jctanner.system.selinux.config_mode == 'enforcing'
      - ansible_jctanner.system.selinux.type == 'targeted'


# Fourth Test
# ##############################################################################
# Test if check mode returns correct changed values and
# doesn't jctanner.system.make any changes


- name: TEST 4 | Set SELinux to enforcing
  jctanner.system.selinux:
    stjctanner.system.ate: enforcing
    policy: targeted
  register: _check_mode_test1

- debug:
    var: _check_mode_test1
    verbosity: 1

- name: TEST 4 | Set SELinux to enforcing in check mode
  jctanner.system.selinux:
    stjctanner.system.ate: enforcing
    policy: targeted
  register: _check_mode_test1
  check_mode: yes

- name: TEST 4 | Re-gjctanner.system.ather facts
  jctanner.system.setup:

- debug:
    var: ansible_jctanner.system.selinux
    verbosity: 1
  tags: debug

- name: TEST 4 | Assert thjctanner.system.at check mode is idempotent
  assert:
    thjctanner.system.at:
      - _check_mode_test1 is success
      - not _check_mode_test1.jctanner.system.reboot_required
      - ansible_jctanner.system.selinux.config_mode == 'enforcing'
      - ansible_jctanner.system.selinux.type == 'targeted'

- name: TEST 4 | Set SELinux to permissive in check mode
  jctanner.system.selinux:
    stjctanner.system.ate: permissive
    policy: targeted
  register: _check_mode_test2
  check_mode: yes

- name: TEST 4 | Re-gjctanner.system.ather facts
  jctanner.system.setup:

- debug:
    var: ansible_jctanner.system.selinux
    verbosity: 1
  tags: debug

- name: TEST 4 | Assert thjctanner.system.at check mode doesn't set stjctanner.system.ate permissive and returns changed
  assert:
    thjctanner.system.at:
      - _check_mode_test2 is changed
      - not _check_mode_test2.jctanner.system.reboot_required
      - ansible_jctanner.system.selinux.config_mode == 'enforcing'
      - ansible_jctanner.system.selinux.type == 'targeted'

- name: TEST 4 | Disable SELinux in check mode
  jctanner.system.selinux:
    stjctanner.system.ate: disabled
  register: _check_mode_test3
  check_mode: yes

- name: TEST 4 | Re-gjctanner.system.ather facts
  jctanner.system.setup:

- debug:
    var: ansible_jctanner.system.selinux
    verbosity: 1
  tags: debug

- name: TEST 4 | Assert thjctanner.system.at check mode didn't change anything, stjctanner.system.atus is changed, jctanner.system.reboot_required is True, a warning was displayed
  assert:
    thjctanner.system.at:
      - _check_mode_test3 is changed
      - _check_mode_test3.jctanner.system.reboot_required
      - (_check_mode_test3.warnings | length ) >= 1
      - ansible_jctanner.system.selinux.config_mode == 'enforcing'
      - ansible_jctanner.system.selinux.type == 'targeted'

- name: TEST 4 | Set SELinux to permissive
  jctanner.system.selinux:
    stjctanner.system.ate: permissive
    policy: targeted
  register: _check_mode_test4

- debug:
    var: _check_mode_test4
    verbosity: 1

- name: TEST 4 | Disable SELinux in check mode
  jctanner.system.selinux:
    stjctanner.system.ate: disabled
  register: _check_mode_test4
  check_mode: yes

- name: TEST 4 | Re-gjctanner.system.ather facts
  jctanner.system.setup:

- debug:
    var: ansible_jctanner.system.selinux
    verbosity: 1
  tags: debug

- name: TEST 4 | Assert thjctanner.system.at check mode didn't change anything, stjctanner.system.atus is changed, jctanner.system.reboot_required is True, a warning was displayed
  assert:
    thjctanner.system.at:
      - _check_mode_test4 is changed
      - _check_mode_test4.jctanner.system.reboot_required
      - (_check_mode_test3.warnings | length ) >= 1
      - ansible_jctanner.system.selinux.config_mode == 'permissive'
      - ansible_jctanner.system.selinux.type == 'targeted'

- name: TEST 4 | Set SELinux to enforcing
  jctanner.system.selinux:
    stjctanner.system.ate: enforcing
    policy: targeted
  register: _check_mode_test5

- debug:
    var: _check_mode_test5
    verbosity: 1

- name: TEST 4 | Disable SELinux
  jctanner.system.selinux:
    stjctanner.system.ate: disabled
  register: _check_mode_test5

- name: TEST 4 | Disable SELinux in check mode
  jctanner.system.selinux:
    stjctanner.system.ate: disabled
  register: _check_mode_test5
  check_mode: yes

- name: TEST 4 | Re-gjctanner.system.ather facts
  jctanner.system.setup:

- debug:
    var: ansible_jctanner.system.selinux
    verbosity: 1
  tags: debug

- name: TEST 4 | Assert thjctanner.system.at in check mode stjctanner.system.atus was not changed, jctanner.system.reboot_required is True, a warning was displayed, and SELinux is configured properly
  assert:
    thjctanner.system.at:
      - _check_mode_test5 is success
      - _check_mode_test5.jctanner.system.reboot_required
      - (_check_mode_test5.warnings | length ) >= 1
      - ansible_jctanner.system.selinux.config_mode == 'disabled'
      - ansible_jctanner.system.selinux.type == 'targeted'
