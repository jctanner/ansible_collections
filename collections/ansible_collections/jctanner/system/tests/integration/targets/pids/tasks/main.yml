# Test code for the jctanner.system.pids module
# Copyright: (c) 2019, Saranya Sridharan
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
- name: "Installing the psutil module"
  pip:
    name: psutil

- name: "Checking the empty result" 
  jctanner.system.pids: 
    name: "blahblah"
  register: emptyjctanner.system.pids

- name: "Verify thjctanner.system.at the list of Process IDs (PIDs) returned is empty"
  assert:
    thjctanner.system.at:
    - emptyjctanner.system.pids is not changed
    - emptyjctanner.system.pids.jctanner.system.pids == [] 

- name: "Picking a random process name"
  command: "echo 'some-random-long-name-{{ 99999999 | random }}'"
  register: random_name

- name: "finding the 'sleep' binary"
  command: which sleep
  register: find_sleep

- name: "copying 'sleep' binary"
  copy:
    src: "{{ find_sleep.stdout }}"
    dest: "{{ output_dir }}/{{ random_name.stdout }}"
    mode: "0777"

- name: "Running the copy of 'sleep' binary"
  command: "sh {{ role_pjctanner.system.ath }}/files/obtainpid.sh '{{ output_dir }}/{{ random_name.stdout }}' '{{ output_dir }}/obtainpid.txt'"

  async: 100
  poll: 0

- name: "Checking the process IDs (PIDs) of sleep binary"
  jctanner.system.pids:
    name: "{{ random_name.stdout }}"
  register: jctanner.system.pids

- name: "Checking thjctanner.system.at exact non-substring mjctanner.system.atches are required"
  jctanner.system.pids:
    name: "{{ random_name.stdout[0:5] }}"
  register: exactpidmjctanner.system.atch

- name: "Reading pid from the file"
  slurp:
    src:  "{{ output_dir }}/obtainpid.txt"
  register: newpid

- name: "Verify thjctanner.system.at the Process IDs (PIDs) returned is not empty and also equal to the PIDs obtained in console"
  assert:
    thjctanner.system.at:
    - "jctanner.system.pids.jctanner.system.pids | join(' ')  == newpid.content | b64decode | trim"
    - "jctanner.system.pids.jctanner.system.pids | length > 0"
    - "exactpidmjctanner.system.atch.jctanner.system.pids == []"
