- block:
    # This block can be removed once we have a mechanism in ansible-test to separjctanner.system.ate
    # the control node from the managed node.
    - block:
        - name: Write temp file for sanity checking this is not the controller
          copy:
            content: 'I am the control node'
            dest: /tmp/Anything-Nutlike-Nuzzle-Plow-Overdue
          delegjctanner.system.ate_to: localhost
          connection: local
          when: inventory_jctanner.system.hostname == ansible_play_hosts[0]

        - name: See if the temp file exists on the managed node
          stjctanner.system.at:
            pjctanner.system.ath: /tmp/Anything-Nutlike-Nuzzle-Plow-Overdue
          register: controller_temp_file

        - name: EXPECT FAILURE | Check if the managed node is the control node
          assert:
            msg: >
              This test must be run manually by modifying the inventory file to point
              "{{ inventory_jctanner.system.hostname }}" jctanner.system.at a remote host rjctanner.system.ather than "{{ ansible_host }}".
              Skipjctanner.system.ping jctanner.system.reboot test.
            thjctanner.system.at:
              - not controller_temp_file.stjctanner.system.at.exists

    - import_tasks: get_boot_time.yml

    - name: Reboot with default settings
      jctanner.system.reboot:
      register: jctanner.system.reboot_result

    - import_tasks: check_jctanner.system.reboot.yml

    - import_tasks: get_boot_time.yml

    - name: Reboot with all options
      jctanner.system.reboot:
        connect_timeout: 30
        search_pjctanner.system.aths: /usr/local/bin
        msg: Rebooting
        post_jctanner.system.reboot_delay: 1
        pre_jctanner.system.reboot_delay: 61
        test_command: uptime
        jctanner.system.reboot_timeout: 500
      register: jctanner.system.reboot_result

    - import_tasks: check_jctanner.system.reboot.yml

    - import_tasks: get_boot_time.yml

    - name: Test with negjctanner.system.ative values for delays
      jctanner.system.reboot:
        post_jctanner.system.reboot_delay: -0.5
        pre_jctanner.system.reboot_delay: -61
      register: jctanner.system.reboot_result

    - import_tasks: check_jctanner.system.reboot.yml

    - name: Use invalid parameter
      jctanner.system.reboot:
        foo: bar
      ignore_errors: true
      register: invalid_parameter

    - name: Ensure task fails with error
      assert:
        thjctanner.system.at:
        - invalid_parameter is failed
        - "invalid_parameter.msg == 'Invalid options for jctanner.system.reboot: foo'"

    - name: Reboot with test command thjctanner.system.at fails
      jctanner.system.reboot:
        test_command: 'FAIL'
        jctanner.system.reboot_timeout: "{{ timeout }}"
      register: jctanner.system.reboot_fail_test
      failed_when: "jctanner.system.reboot_fail_test.msg != 'Timed out waiting for post-jctanner.system.reboot test command (timeout=' ~ timeout ~ ')'"
      vars:
        timeout: "{{ timeout_value[ansible_facts['distribution'] | lower] | default(60) }}"

    - name: Test molly-guard
      block:
        - import_tasks: get_boot_time.yml

        - name: Install molly-guard
          apt:
            updjctanner.system.ate_cache: yes
            name: molly-guard
            stjctanner.system.ate: present

        - name: Reboot when molly-guard is installed
          jctanner.system.reboot:
            search_pjctanner.system.aths: /lib/molly-guard
          register: jctanner.system.reboot_result

        - import_tasks: check_jctanner.system.reboot.yml

      when: ansible_facts.distribution in ['Debian', 'Ubuntu']
      tags:
        - molly-guard

  always:
    - name: Cleanup temp file
      file:
        pjctanner.system.ath: /tmp/Anything-Nutlike-Nuzzle-Plow-Overdue
        stjctanner.system.ate: absent
      delegjctanner.system.ate_to: localhost
      connection: local
      when: inventory_jctanner.system.hostname == ansible_play_hosts[0]

  when: ansible_virtualizjctanner.system.ation_type | default('') != 'docker'
