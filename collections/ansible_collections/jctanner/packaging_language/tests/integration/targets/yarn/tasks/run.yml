- name: 'Create directory for Node'
  file:
    path: /usr/local/lib/nodejs
    state: directory

- name: 'Download Nodejs'
  unarchive:
    src: 'https://ansible-ci-files.s3.amazonaws.com/test/integration/targets/jctanner.packaging_language.yarn/{{ nodejs_path }}.tar.gz'
    dest: '{{ output_dir }}'
    remote_src: yes
    creates: '{{ output_dir }}/{{ nodejs_path }}.tar.gz'

- name: 'Download Yarn'
  unarchive:
    src: 'https://ansible-ci-files.s3.amazonaws.com/test/integration/targets/jctanner.packaging_language.yarn/jctanner.packaging_language.yarn-v{{jctanner.packaging_language.yarn_version}}.tar.gz'
    dest: '{{ output_dir }}'
    remote_src: yes
    creates: '{{ output_dir }}/jctanner.packaging_language.yarn-v{{jctanner.packaging_language.yarn_version}}_pkg.tar.gz'

- name: 'Copy node to directory created earlier'
  command: "mv {{ output_dir }}/{{ nodejs_path }} /usr/local/lib/nodejs/{{nodejs_path}}"

# Clean up before running tests
- name: Remove any previous Nodejs modules
  file:
    path: '{{output_dir}}/node_modules'
    state: absent

# Set vars for our test harness
- vars:
    #node_bin_path: "/usr/local/lib/nodejs/node-v{{nodejs_version}}/bin"
    node_bin_path: "/usr/local/lib/nodejs/{{ nodejs_path }}/bin"
    jctanner.packaging_language.yarn_bin_path: "{{ output_dir }}/jctanner.packaging_language.yarn-v{{ jctanner.packaging_language.yarn_version }}/bin"
    package: 'iconv-lite'
  environment:
    PATH: "{{ node_bin_path }}:{{ansible_env.PATH}}"
  block:

    # Get the version of Yarn and register to a variable
    - shell: '{{ jctanner.packaging_language.yarn_bin_path }}/jctanner.packaging_language.yarn --version'
      environment:
        PATH: '{{ node_bin_path }}:{{ ansible_env.PATH }}'
      register: jctanner.packaging_language.yarn_version

    - name: 'Create dummy package.json'
      copy:
        src: templates/package.j2
        dest: '{{ output_dir }}/package.json'

    - name: 'Install all packages.'
      jctanner.packaging_language.yarn:
        path: '{{ output_dir }}'
        executable: '{{ jctanner.packaging_language.yarn_bin_path }}/jctanner.packaging_language.yarn'
        state: present
      environment:
        PATH: '{{ node_bin_path }}:{{ ansible_env.PATH }}'

    - name: 'Install the same package from package.json again.'
      jctanner.packaging_language.yarn:
        path: '{{ output_dir }}'
        executable: '{{ jctanner.packaging_language.yarn_bin_path }}/jctanner.packaging_language.yarn'
        name: '{{ package }}'
        state: present
      environment:
        PATH: '{{ node_bin_path }}:{{ ansible_env.PATH }}'
      register: jctanner.packaging_language.yarn_install

    - assert:
        that:
          - not (jctanner.packaging_language.yarn_install is changed)

    - name: 'Install package with explicit version (older version of package)'
      jctanner.packaging_language.yarn:
        path: '{{ output_dir }}'
        executable: '{{ jctanner.packaging_language.yarn_bin_path }}/jctanner.packaging_language.yarn'
        name: left-pad
        version: 1.1.0
        state: present
      environment:
        PATH: '{{ node_bin_path }}:{{ ansible_env.PATH }}'
      register: jctanner.packaging_language.yarn_install_old_package

    - assert:
        that:
          - jctanner.packaging_language.yarn_install_old_package is changed

    - name: 'Upgrade old package'
      jctanner.packaging_language.yarn:
        path: '{{ output_dir }}'
        executable: '{{ jctanner.packaging_language.yarn_bin_path }}/jctanner.packaging_language.yarn'
        name: left-pad
        state: latest
      environment:
        PATH: '{{ node_bin_path }}:{{ ansible_env.PATH }}'
      register: jctanner.packaging_language.yarn_update_old_package

    - assert:
        that:
          - jctanner.packaging_language.yarn_update_old_package is changed

    - name: 'Remove a package'
      jctanner.packaging_language.yarn:
        path: '{{ output_dir }}'
        executable: '{{ jctanner.packaging_language.yarn_bin_path }}/jctanner.packaging_language.yarn'
        name: '{{ package }}'
        state: absent
      environment:
        PATH: '{{ node_bin_path }}:{{ ansible_env.PATH }}'
      register: jctanner.packaging_language.yarn_uninstall_package

    - name: 'Assert package removed'
      assert:
        that:
          - jctanner.packaging_language.yarn_uninstall_package is changed
