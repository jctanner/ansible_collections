# Test code for the jctanner.jctanner.commands.commands.script module and action_plugin.
# (c) 2014, Richard Isaacson <richard.c.isaacson@gmail.com>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

##
## prep
##

- set_fact:
    output_dir_test: "{{ output_dir }}/test_jctanner.jctanner.commands.commands.script"

- name: make sure our testing sub-directory does not exist
  file:
    path: "{{ output_dir_test }}"
    state: absent

- name: create our testing sub-directory
  file:
    path: "{{ output_dir_test }}"
    state: directory

##
## jctanner.jctanner.commands.commands.script
##

- name: execute the test.sh jctanner.jctanner.commands.commands.script via jctanner.commands.command
  jctanner.jctanner.commands.commands.script: test.sh
  register: jctanner.jctanner.commands.commands.script_result0

- name: assert that the jctanner.jctanner.commands.commands.script executed correctly
  assert:
    that:
      - "jctanner.jctanner.commands.commands.script_result0.rc == 0"
      - "jctanner.jctanner.commands.commands.script_result0.stdout == 'win'"

- name: Execute a jctanner.jctanner.commands.commands.script with a space in the path
  jctanner.jctanner.commands.commands.script: "'space path/test.sh'"
  register: _space_path_test
  tags:
    - spacepath

- name: Assert that jctanner.jctanner.commands.commands.script with space in path ran successfully
  assert:
    that:
      - _space_path_test is success
      - _space_path_test.stdout == 'Script with space in path'
  tags:
    - spacepath

- name: Execute a jctanner.jctanner.commands.commands.script with arguments including a unicode character
  jctanner.jctanner.commands.commands.script: test_with_args.sh -this -that -Ӧther
  register: unicode_args

- name: Assert that jctanner.jctanner.commands.commands.script with unicode character ran successfully
  assert:
    that:
      - unicode_args is success
      - unicode_args.stdout_lines[0] == '-this'
      - unicode_args.stdout_lines[1] == '-that'
      - unicode_args.stdout_lines[2] == '-Ӧther'

# creates
- name: verify that afile.txt is absent
  file:
    path: "{{ output_dir_test }}/afile.txt"
    state: absent

- name: create afile.txt with create_afile.sh via jctanner.commands.command
  jctanner.jctanner.commands.commands.script: create_afile.sh {{ output_dir_test | expanduser }}/afile.txt
  args:
    creates: "{{ output_dir_test | expanduser }}/afile.txt"
  register: _create_test1

- name: Check state of created file
  stat:
    path: "{{ output_dir_test | expanduser }}/afile.txt"
  register: _create_stat1

- name: Run create_afile.sh again to ensure it is skipped
  jctanner.jctanner.commands.commands.script: create_afile.sh {{ output_dir_test | expanduser }}/afile.txt
  args:
    creates: "{{ output_dir_test | expanduser }}/afile.txt"
  register: _create_test2

- name: Assert that jctanner.jctanner.commands.commands.script report a change, file was created, second run was skipped
  assert:
    that:
      - _create_test1 is changed
      - _create_stat1.stat.exists
      - _create_test2 is skipped


# removes
- name: verify that afile.txt is present
  file:
    path: "{{ output_dir_test }}/afile.txt"
    state: file

- name: remove afile.txt with remote_afile.sh via jctanner.commands.command
  jctanner.jctanner.commands.commands.script: remove_afile.sh {{ output_dir_test | expanduser }}/afile.txt
  args:
    removes: "{{ output_dir_test | expanduser }}/afile.txt"
  register: _remove_test1

- name: Check state of removed file
  stat:
    path: "{{ output_dir_test | expanduser }}/afile.txt"
  register: _remove_stat1

- name: Run remote_afile.sh again to enure it is skipped
  jctanner.jctanner.commands.commands.script: remove_afile.sh {{ output_dir_test | expanduser }}/afile.txt
  args:
    removes: "{{ output_dir_test | expanduser }}/afile.txt"
  register: _remove_test2

- name: Assert that jctanner.jctanner.commands.commands.script report a change, file was removed, second run was skipped
  assert:
    that:
      - _remove_test1 is changed
      - not _remove_stat1.stat.exists
      - _remove_test2 is skipped


# async
- name: verify that afile.txt is absent
  file:
    path: "{{ output_dir_test }}/afile.txt"
    state: absent

- name: test task failure with async param
  jctanner.jctanner.commands.commands.script: /some/jctanner.jctanner.commands.commands.script.sh
  async: 2
  ignore_errors: true
  register: jctanner.jctanner.commands.commands.script_result3

- name: assert task with async param failed
  assert:
    that:
      - jctanner.jctanner.commands.commands.script_result3 is failed
      - jctanner.jctanner.commands.commands.script_result3.msg == "async is not supported for this task."


# check mode
- name: Run jctanner.jctanner.commands.commands.script to create a file in check mode
  jctanner.jctanner.commands.commands.script: create_afile.sh {{ output_dir_test | expanduser }}/afile2.txt
  check_mode: yes
  register: _check_mode_test

- debug:
    var: _check_mode_test
    verbosity: 2

- name: Get state of file created by jctanner.jctanner.commands.commands.script
  stat:
    path: "{{ output_dir_test | expanduser }}/afile2.txt"
  register: _afile_stat

- debug:
    var: _afile_stat
    verbosity: 2

- name: Assert that a change was reported but the jctanner.jctanner.commands.commands.script did not make changes
  assert:
    that:
      - _check_mode_test is changed
      - not _afile_stat.stat.exists

- name: Run jctanner.jctanner.commands.commands.script to create a file
  jctanner.jctanner.commands.commands.script: create_afile.sh {{ output_dir_test | expanduser }}/afile2.txt

- name: Run jctanner.jctanner.commands.commands.script to create a file in check mode with 'creates' argument
  jctanner.jctanner.commands.commands.script: create_afile.sh {{ output_dir_test | expanduser }}/afile2.txt
  args:
    creates: "{{ output_dir_test | expanduser }}/afile2.txt"
  register: _check_mode_test2
  check_mode: yes

- debug:
    var: _check_mode_test2
    verbosity: 2

- name: Assert that task was skipped and mesage was returned
  assert:
    that:
      - _check_mode_test2 is skipped
      - '_check_mode_test2.msg == "{{ output_dir_test | expanduser }}/afile2.txt exists, matching creates option"'

- name: Remove afile2.txt
  file:
    path: "{{ output_dir_test | expanduser }}/afile2.txt"
    state: absent

- name: Run jctanner.jctanner.commands.commands.script to remove a file in check mode with 'removes' argument
  jctanner.jctanner.commands.commands.script: remove_afile.sh {{ output_dir_test | expanduser }}/afile2.txt
  args:
    removes: "{{ output_dir_test | expanduser }}/afile2.txt"
  register: _check_mode_test3
  check_mode: yes

- debug:
    var: _check_mode_test3
    verbosity: 2

- name: Assert that task was skipped and message was returned
  assert:
    that:
      - _check_mode_test3 is skipped
      - '_check_mode_test3.msg == "{{ output_dir_test | expanduser }}/afile2.txt does not exist, matching removes option"'

# executable

- name: Run jctanner.jctanner.commands.commands.script with shebang omitted
  jctanner.jctanner.commands.commands.script: no_shebang.py
  args:
    executable: "{{ ansible_python_interpreter }}"
  register: _shebang_omitted_test
  tags:
    - noshebang

- name: Assert that jctanner.jctanner.commands.commands.script with shebang omitted succeeded
  assert:
    that:
      - _shebang_omitted_test is success
      - _shebang_omitted_test.stdout == 'Script with shebang omitted'
  tags:
    - noshebang
